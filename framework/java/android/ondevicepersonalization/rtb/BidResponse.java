/*
 * Copyright (C) 2022 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.ondevicepersonalization.rtb;

import android.annotation.NonNull;
import android.annotation.Nullable;
import android.os.Parcelable;
import android.os.PersistableBundle;

import com.android.ondevicepersonalization.internal.util.AnnotationValidations;
import com.android.ondevicepersonalization.internal.util.DataClass;

import java.util.List;

/**
 * A Bid Response returned by a {@link Bidder}.
 *
 * @hide
 */
@DataClass(genBuilder = true, genEqualsHashCode = true)
public final class BidResponse implements Parcelable {
    /** A list of {@link SeatBid} objects returned with this bid response. */
    @Nullable private List<SeatBid> mSeatBids = null;

    /** The bid currency. Must be a valid currency code. */
    @NonNull private String mCur = "";

    /** Reason for not bidding. Logged. Ignored if mSeatBids is not empty. */
    private int mNbr = 0;

    /** Custom data returned by bidder to exchange for filtering. Not logged. */
    @Nullable private PersistableBundle mExt = null;



    // Code below generated by codegen v1.0.23.
    //
    // DO NOT MODIFY!
    // CHECKSTYLE:OFF Generated code
    //
    // To regenerate run:
    // $ codegen $ANDROID_BUILD_TOP/packages/modules/OnDevicePersonalization/framework/java/android/ondevicepersonalization/rtb/BidResponse.java
    //
    // To exclude the generated code from IntelliJ auto-formatting enable (one-time):
    //   Settings > Editor > Code Style > Formatter Control
    //@formatter:off


    @DataClass.Generated.Member
    /* package-private */ BidResponse(
            @Nullable List<SeatBid> seatBids,
            @NonNull String cur,
            int nbr,
            @Nullable PersistableBundle ext) {
        this.mSeatBids = seatBids;
        this.mCur = cur;
        AnnotationValidations.validate(
                NonNull.class, null, mCur);
        this.mNbr = nbr;
        this.mExt = ext;

        // onConstructed(); // You can define this method to get a callback
    }

    /**
     * A list of {@link SeatBid} objects returned with this bid response.
     */
    @DataClass.Generated.Member
    public @Nullable List<SeatBid> getSeatBids() {
        return mSeatBids;
    }

    /**
     * The bid currency. Must be a valid currency code.
     */
    @DataClass.Generated.Member
    public @NonNull String getCur() {
        return mCur;
    }

    /**
     * Reason for not bidding. Logged. Ignored if mSeatBids is not empty.
     */
    @DataClass.Generated.Member
    public int getNbr() {
        return mNbr;
    }

    /**
     * Custom data returned by bidder to exchange for filtering. Not logged.
     */
    @DataClass.Generated.Member
    public @Nullable PersistableBundle getExt() {
        return mExt;
    }

    @Override
    @DataClass.Generated.Member
    public boolean equals(@Nullable Object o) {
        // You can override field equality logic by defining either of the methods like:
        // boolean fieldNameEquals(BidResponse other) { ... }
        // boolean fieldNameEquals(FieldType otherValue) { ... }

        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        @SuppressWarnings("unchecked")
        BidResponse that = (BidResponse) o;
        //noinspection PointlessBooleanExpression
        return true
                && java.util.Objects.equals(mSeatBids, that.mSeatBids)
                && java.util.Objects.equals(mCur, that.mCur)
                && mNbr == that.mNbr
                && java.util.Objects.equals(mExt, that.mExt);
    }

    @Override
    @DataClass.Generated.Member
    public int hashCode() {
        // You can override field hashCode logic by defining methods like:
        // int fieldNameHashCode() { ... }

        int _hash = 1;
        _hash = 31 * _hash + java.util.Objects.hashCode(mSeatBids);
        _hash = 31 * _hash + java.util.Objects.hashCode(mCur);
        _hash = 31 * _hash + mNbr;
        _hash = 31 * _hash + java.util.Objects.hashCode(mExt);
        return _hash;
    }

    @Override
    @DataClass.Generated.Member
    public void writeToParcel(@NonNull android.os.Parcel dest, int flags) {
        // You can override field parcelling by defining methods like:
        // void parcelFieldName(Parcel dest, int flags) { ... }

        byte flg = 0;
        if (mSeatBids != null) flg |= 0x1;
        if (mExt != null) flg |= 0x8;
        dest.writeByte(flg);
        if (mSeatBids != null) dest.writeParcelableList(mSeatBids, flags);
        dest.writeString(mCur);
        dest.writeInt(mNbr);
        if (mExt != null) dest.writeTypedObject(mExt, flags);
    }

    @Override
    @DataClass.Generated.Member
    public int describeContents() { return 0; }

    /** @hide */
    @SuppressWarnings({"unchecked", "RedundantCast"})
    @DataClass.Generated.Member
    /* package-private */ BidResponse(@NonNull android.os.Parcel in) {
        // You can override field unparcelling by defining methods like:
        // static FieldType unparcelFieldName(Parcel in) { ... }

        byte flg = in.readByte();
        List<SeatBid> seatBids = null;
        if ((flg & 0x1) != 0) {
            seatBids = new java.util.ArrayList<>();
            in.readParcelableList(seatBids, SeatBid.class.getClassLoader());
        }
        String cur = in.readString();
        int nbr = in.readInt();
        PersistableBundle ext = (flg & 0x8) == 0 ? null : (PersistableBundle) in.readTypedObject(PersistableBundle.CREATOR);

        this.mSeatBids = seatBids;
        this.mCur = cur;
        AnnotationValidations.validate(
                NonNull.class, null, mCur);
        this.mNbr = nbr;
        this.mExt = ext;

        // onConstructed(); // You can define this method to get a callback
    }

    @DataClass.Generated.Member
    public static final @NonNull Parcelable.Creator<BidResponse> CREATOR
            = new Parcelable.Creator<BidResponse>() {
        @Override
        public BidResponse[] newArray(int size) {
            return new BidResponse[size];
        }

        @Override
        public BidResponse createFromParcel(@NonNull android.os.Parcel in) {
            return new BidResponse(in);
        }
    };

    /**
     * A builder for {@link BidResponse}
     */
    @SuppressWarnings("WeakerAccess")
    @DataClass.Generated.Member
    public static final class Builder {

        private @Nullable List<SeatBid> mSeatBids;
        private @NonNull String mCur;
        private int mNbr;
        private @Nullable PersistableBundle mExt;

        private long mBuilderFieldsSet = 0L;

        public Builder() {
        }

        /**
         * A list of {@link SeatBid} objects returned with this bid response.
         */
        @DataClass.Generated.Member
        public @NonNull Builder setSeatBids(@NonNull List<SeatBid> value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x1;
            mSeatBids = value;
            return this;
        }

        /** @see #setSeatBids */
        @DataClass.Generated.Member
        public @NonNull Builder addSeatBids(@NonNull SeatBid value) {
            // You can refine this method's name by providing item's singular name, e.g.:
            // @DataClass.PluralOf("item")) mItems = ...

            if (mSeatBids == null) setSeatBids(new java.util.ArrayList<>());
            mSeatBids.add(value);
            return this;
        }

        /**
         * The bid currency. Must be a valid currency code.
         */
        @DataClass.Generated.Member
        public @NonNull Builder setCur(@NonNull String value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x2;
            mCur = value;
            return this;
        }

        /**
         * Reason for not bidding. Logged. Ignored if mSeatBids is not empty.
         */
        @DataClass.Generated.Member
        public @NonNull Builder setNbr(int value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x4;
            mNbr = value;
            return this;
        }

        /**
         * Custom data returned by bidder to exchange for filtering. Not logged.
         */
        @DataClass.Generated.Member
        public @NonNull Builder setExt(@NonNull PersistableBundle value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x8;
            mExt = value;
            return this;
        }

        /** Builds the instance. This builder should not be touched after calling this! */
        public @NonNull BidResponse build() {
            checkNotUsed();
            mBuilderFieldsSet |= 0x10; // Mark builder used

            if ((mBuilderFieldsSet & 0x1) == 0) {
                mSeatBids = null;
            }
            if ((mBuilderFieldsSet & 0x2) == 0) {
                mCur = "";
            }
            if ((mBuilderFieldsSet & 0x4) == 0) {
                mNbr = 0;
            }
            if ((mBuilderFieldsSet & 0x8) == 0) {
                mExt = null;
            }
            BidResponse o = new BidResponse(
                    mSeatBids,
                    mCur,
                    mNbr,
                    mExt);
            return o;
        }

        private void checkNotUsed() {
            if ((mBuilderFieldsSet & 0x10) != 0) {
                throw new IllegalStateException(
                        "This Builder should not be reused. Use a new Builder instance instead");
            }
        }
    }

    @DataClass.Generated(
            time = 1659465278198L,
            codegenVersion = "1.0.23",
            sourceFile = "packages/modules/OnDevicePersonalization/framework/java/android/ondevicepersonalization/rtb/BidResponse.java",
            inputSignatures = "private @android.annotation.Nullable java.util.List<android.ondevicepersonalization.rtb.SeatBid> mSeatBids\nprivate @android.annotation.NonNull java.lang.String mCur\nprivate  int mNbr\nprivate @android.annotation.Nullable android.os.PersistableBundle mExt\nclass BidResponse extends java.lang.Object implements [android.os.Parcelable]\n@com.android.ondevicepersonalization.internal.util.DataClass(genBuilder=true, genEqualsHashCode=true)")
    @Deprecated
    private void __metadata() {}


    //@formatter:on
    // End of generated code

}
