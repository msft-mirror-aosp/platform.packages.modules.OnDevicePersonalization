/*
 * Copyright (C) 2023 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.ondevicepersonalization;

import android.annotation.Nullable;
import android.os.Parcelable;

import com.android.ondevicepersonalization.internal.util.DataClass;

/**
 * A list of metrics to be logged in the Query or Events table.
 *
 * @hide
 */
@DataClass(genBuilder = true, genEqualsHashCode = true)
public final class Metrics implements Parcelable {
    /** Integer or fixed point metrics. */
    @Nullable private long[] mIntValues = null;

    /** Floating point metrics. */
    @Nullable private double[] mFloatValues = null;



    // Code below generated by codegen v1.0.23.
    //
    // DO NOT MODIFY!
    // CHECKSTYLE:OFF Generated code
    //
    // To regenerate run:
    // $ codegen $ANDROID_BUILD_TOP/packages/modules/OnDevicePersonalization/framework/java/android/ondevicepersonalization/Metrics.java
    //
    // To exclude the generated code from IntelliJ auto-formatting enable (one-time):
    //   Settings > Editor > Code Style > Formatter Control
    //@formatter:off


    @DataClass.Generated.Member
    /* package-private */ Metrics(
            @Nullable long[] intValues,
            @Nullable double[] floatValues) {
        this.mIntValues = intValues;
        this.mFloatValues = floatValues;

        // onConstructed(); // You can define this method to get a callback
    }

    /**
     * Integer or fixed point metrics.
     */
    @DataClass.Generated.Member
    public @Nullable long[] getIntValues() {
        return mIntValues;
    }

    /**
     * Floating point metrics.
     */
    @DataClass.Generated.Member
    public @Nullable double[] getFloatValues() {
        return mFloatValues;
    }

    @Override
    @DataClass.Generated.Member
    public boolean equals(@Nullable Object o) {
        // You can override field equality logic by defining either of the methods like:
        // boolean fieldNameEquals(Metrics other) { ... }
        // boolean fieldNameEquals(FieldType otherValue) { ... }

        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        @SuppressWarnings("unchecked")
        Metrics that = (Metrics) o;
        //noinspection PointlessBooleanExpression
        return true
                && java.util.Arrays.equals(mIntValues, that.mIntValues)
                && java.util.Arrays.equals(mFloatValues, that.mFloatValues);
    }

    @Override
    @DataClass.Generated.Member
    public int hashCode() {
        // You can override field hashCode logic by defining methods like:
        // int fieldNameHashCode() { ... }

        int _hash = 1;
        _hash = 31 * _hash + java.util.Arrays.hashCode(mIntValues);
        _hash = 31 * _hash + java.util.Arrays.hashCode(mFloatValues);
        return _hash;
    }

    @Override
    @DataClass.Generated.Member
    public void writeToParcel(@android.annotation.NonNull android.os.Parcel dest, int flags) {
        // You can override field parcelling by defining methods like:
        // void parcelFieldName(Parcel dest, int flags) { ... }

        byte flg = 0;
        if (mIntValues != null) flg |= 0x1;
        if (mFloatValues != null) flg |= 0x2;
        dest.writeByte(flg);
        if (mIntValues != null) dest.writeLongArray(mIntValues);
        if (mFloatValues != null) dest.writeDoubleArray(mFloatValues);
    }

    @Override
    @DataClass.Generated.Member
    public int describeContents() { return 0; }

    /** @hide */
    @SuppressWarnings({"unchecked", "RedundantCast"})
    @DataClass.Generated.Member
    /* package-private */ Metrics(@android.annotation.NonNull android.os.Parcel in) {
        // You can override field unparcelling by defining methods like:
        // static FieldType unparcelFieldName(Parcel in) { ... }

        byte flg = in.readByte();
        long[] intValues = (flg & 0x1) == 0 ? null : in.createLongArray();
        double[] floatValues = (flg & 0x2) == 0 ? null : in.createDoubleArray();

        this.mIntValues = intValues;
        this.mFloatValues = floatValues;

        // onConstructed(); // You can define this method to get a callback
    }

    @DataClass.Generated.Member
    public static final @android.annotation.NonNull Parcelable.Creator<Metrics> CREATOR
            = new Parcelable.Creator<Metrics>() {
        @Override
        public Metrics[] newArray(int size) {
            return new Metrics[size];
        }

        @Override
        public Metrics createFromParcel(@android.annotation.NonNull android.os.Parcel in) {
            return new Metrics(in);
        }
    };

    /**
     * A builder for {@link Metrics}
     */
    @SuppressWarnings("WeakerAccess")
    @DataClass.Generated.Member
    public static final class Builder {

        private @Nullable long[] mIntValues;
        private @Nullable double[] mFloatValues;

        private long mBuilderFieldsSet = 0L;

        public Builder() {
        }

        /**
         * Integer or fixed point metrics.
         */
        @DataClass.Generated.Member
        public @android.annotation.NonNull Builder setIntValues(@android.annotation.NonNull long... value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x1;
            mIntValues = value;
            return this;
        }

        /**
         * Floating point metrics.
         */
        @DataClass.Generated.Member
        public @android.annotation.NonNull Builder setFloatValues(@android.annotation.NonNull double... value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x2;
            mFloatValues = value;
            return this;
        }

        /** Builds the instance. This builder should not be touched after calling this! */
        public @android.annotation.NonNull Metrics build() {
            checkNotUsed();
            mBuilderFieldsSet |= 0x4; // Mark builder used

            if ((mBuilderFieldsSet & 0x1) == 0) {
                mIntValues = null;
            }
            if ((mBuilderFieldsSet & 0x2) == 0) {
                mFloatValues = null;
            }
            Metrics o = new Metrics(
                    mIntValues,
                    mFloatValues);
            return o;
        }

        private void checkNotUsed() {
            if ((mBuilderFieldsSet & 0x4) != 0) {
                throw new IllegalStateException(
                        "This Builder should not be reused. Use a new Builder instance instead");
            }
        }
    }

    @DataClass.Generated(
            time = 1675798085724L,
            codegenVersion = "1.0.23",
            sourceFile = "packages/modules/OnDevicePersonalization/framework/java/android/ondevicepersonalization/Metrics.java",
            inputSignatures = "private @android.annotation.Nullable long[] mIntValues\nprivate @android.annotation.Nullable double[] mFloatValues\nclass Metrics extends java.lang.Object implements [android.os.Parcelable]\n@com.android.ondevicepersonalization.internal.util.DataClass(genBuilder=true, genEqualsHashCode=true)")
    @Deprecated
    private void __metadata() {}


    //@formatter:on
    // End of generated code

}
