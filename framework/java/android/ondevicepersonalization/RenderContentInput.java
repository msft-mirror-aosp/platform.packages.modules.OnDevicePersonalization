/*
 * Copyright (C) 2022 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.ondevicepersonalization;

import android.annotation.NonNull;
import android.os.Parcelable;

import com.android.ondevicepersonalization.internal.util.AnnotationValidations;
import com.android.ondevicepersonalization.internal.util.DataClass;

import java.util.List;

/**
 * The output to be rendered in a slot within a calling app.
 *
 * @hide
 */
@DataClass(genBuilder = true, genEqualsHashCode = true)
public final class RenderContentInput implements Parcelable {
    /** Properties of the slot to be rendered in. */
    @NonNull SlotInfo mSlotInfo;

    /** A List of Bid Ids to be rendered. */
    @NonNull List<String> mBidIds;



    // Code below generated by codegen v1.0.23.
    //
    // DO NOT MODIFY!
    // CHECKSTYLE:OFF Generated code
    //
    // To regenerate run:
    // $ codegen $ANDROID_BUILD_TOP/packages/modules/OnDevicePersonalization/framework/java/android/ondevicepersonalization/RenderContentInput.java
    //
    // To exclude the generated code from IntelliJ auto-formatting enable (one-time):
    //   Settings > Editor > Code Style > Formatter Control
    //@formatter:off


    @DataClass.Generated.Member
    /* package-private */ RenderContentInput(
            @NonNull SlotInfo slotInfo,
            @NonNull List<String> bidIds) {
        this.mSlotInfo = slotInfo;
        AnnotationValidations.validate(
                NonNull.class, null, mSlotInfo);
        this.mBidIds = bidIds;
        AnnotationValidations.validate(
                NonNull.class, null, mBidIds);

        // onConstructed(); // You can define this method to get a callback
    }

    /**
     * Properties of the slot to be rendered in.
     */
    @DataClass.Generated.Member
    public @NonNull SlotInfo getSlotInfo() {
        return mSlotInfo;
    }

    /**
     * A List of Bid Ids to be rendered.
     */
    @DataClass.Generated.Member
    public @NonNull List<String> getBidIds() {
        return mBidIds;
    }

    @Override
    @DataClass.Generated.Member
    public boolean equals(@android.annotation.Nullable Object o) {
        // You can override field equality logic by defining either of the methods like:
        // boolean fieldNameEquals(RenderContentInput other) { ... }
        // boolean fieldNameEquals(FieldType otherValue) { ... }

        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        @SuppressWarnings("unchecked")
        RenderContentInput that = (RenderContentInput) o;
        //noinspection PointlessBooleanExpression
        return true
                && java.util.Objects.equals(mSlotInfo, that.mSlotInfo)
                && java.util.Objects.equals(mBidIds, that.mBidIds);
    }

    @Override
    @DataClass.Generated.Member
    public int hashCode() {
        // You can override field hashCode logic by defining methods like:
        // int fieldNameHashCode() { ... }

        int _hash = 1;
        _hash = 31 * _hash + java.util.Objects.hashCode(mSlotInfo);
        _hash = 31 * _hash + java.util.Objects.hashCode(mBidIds);
        return _hash;
    }

    @Override
    @DataClass.Generated.Member
    public void writeToParcel(@NonNull android.os.Parcel dest, int flags) {
        // You can override field parcelling by defining methods like:
        // void parcelFieldName(Parcel dest, int flags) { ... }

        dest.writeTypedObject(mSlotInfo, flags);
        dest.writeStringList(mBidIds);
    }

    @Override
    @DataClass.Generated.Member
    public int describeContents() { return 0; }

    /** @hide */
    @SuppressWarnings({"unchecked", "RedundantCast"})
    @DataClass.Generated.Member
    /* package-private */ RenderContentInput(@NonNull android.os.Parcel in) {
        // You can override field unparcelling by defining methods like:
        // static FieldType unparcelFieldName(Parcel in) { ... }

        SlotInfo slotInfo = (SlotInfo) in.readTypedObject(SlotInfo.CREATOR);
        List<String> bidIds = new java.util.ArrayList<>();
        in.readStringList(bidIds);

        this.mSlotInfo = slotInfo;
        AnnotationValidations.validate(
                NonNull.class, null, mSlotInfo);
        this.mBidIds = bidIds;
        AnnotationValidations.validate(
                NonNull.class, null, mBidIds);

        // onConstructed(); // You can define this method to get a callback
    }

    @DataClass.Generated.Member
    public static final @NonNull Parcelable.Creator<RenderContentInput> CREATOR
            = new Parcelable.Creator<RenderContentInput>() {
        @Override
        public RenderContentInput[] newArray(int size) {
            return new RenderContentInput[size];
        }

        @Override
        public RenderContentInput createFromParcel(@NonNull android.os.Parcel in) {
            return new RenderContentInput(in);
        }
    };

    /**
     * A builder for {@link RenderContentInput}
     */
    @SuppressWarnings("WeakerAccess")
    @DataClass.Generated.Member
    public static final class Builder {

        private @NonNull SlotInfo mSlotInfo;
        private @NonNull List<String> mBidIds;

        private long mBuilderFieldsSet = 0L;

        /**
         * Creates a new Builder.
         */
        public Builder() {
        }

        /**
         * Properties of the slot to be rendered in.
         */
        @DataClass.Generated.Member
        public @NonNull Builder setSlotInfo(@NonNull SlotInfo value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x1;
            mSlotInfo = value;
            return this;
        }

        /**
         * A List of Bid Ids to be rendered.
         */
        @DataClass.Generated.Member
        public @NonNull Builder setBidIds(@NonNull List<String> value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x2;
            mBidIds = value;
            return this;
        }

        /** @see #setBidIds */
        @DataClass.Generated.Member
        public @NonNull Builder addBidIds(@NonNull String value) {
            // You can refine this method's name by providing item's singular name, e.g.:
            // @DataClass.PluralOf("item")) mItems = ...

            if (mBidIds == null) setBidIds(new java.util.ArrayList<>());
            mBidIds.add(value);
            return this;
        }

        /** Builds the instance. This builder should not be touched after calling this! */
        public @NonNull RenderContentInput build() {
            checkNotUsed();
            mBuilderFieldsSet |= 0x4; // Mark builder used

            RenderContentInput o = new RenderContentInput(
                    mSlotInfo,
                    mBidIds);
            return o;
        }

        private void checkNotUsed() {
            if ((mBuilderFieldsSet & 0x4) != 0) {
                throw new IllegalStateException(
                        "This Builder should not be reused. Use a new Builder instance instead");
            }
        }
    }

    @DataClass.Generated(
            time = 1673307990754L,
            codegenVersion = "1.0.23",
            sourceFile = "packages/modules/OnDevicePersonalization/framework/java/android/ondevicepersonalization/RenderContentInput.java",
            inputSignatures = " @android.annotation.NonNull android.ondevicepersonalization.SlotInfo mSlotInfo\n @android.annotation.NonNull java.util.List<java.lang.String> mBidIds\nclass RenderContentInput extends java.lang.Object implements [android.os.Parcelable]\n@com.android.ondevicepersonalization.internal.util.DataClass(genBuilder=true, genEqualsHashCode=true)")
    @Deprecated
    private void __metadata() {}


    //@formatter:on
    // End of generated code

}
