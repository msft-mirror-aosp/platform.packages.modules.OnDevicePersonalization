/*
 * Copyright (C) 2023 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.ondevicepersonalization;

import android.annotation.Nullable;
import android.os.Parcelable;

import com.android.ondevicepersonalization.internal.util.DataClass;

/**
 * The inputs required for computing event-level metrics to be logged.
 *
 * @hide
 */
@DataClass(genBuilder = true, genEqualsHashCode = true)
public final class EventMetricsInput implements Parcelable {
    /** The type of the event. */
    private int mEventType = 0;

    /** A list of int or fixed point inputs required for metric computation. */
    @Nullable private long[] mIntInputs = null;

    /** A list of floating point inputs required for metric computation. */
    @Nullable private double[] mFloatInputs = null;



    // Code below generated by codegen v1.0.23.
    //
    // DO NOT MODIFY!
    // CHECKSTYLE:OFF Generated code
    //
    // To regenerate run:
    // $ codegen $ANDROID_BUILD_TOP/packages/modules/OnDevicePersonalization/framework/java/android/ondevicepersonalization/EventMetricsInput.java
    //
    // To exclude the generated code from IntelliJ auto-formatting enable (one-time):
    //   Settings > Editor > Code Style > Formatter Control
    //@formatter:off


    @DataClass.Generated.Member
    /* package-private */ EventMetricsInput(
            int eventType,
            @Nullable long[] intInputs,
            @Nullable double[] floatInputs) {
        this.mEventType = eventType;
        this.mIntInputs = intInputs;
        this.mFloatInputs = floatInputs;

        // onConstructed(); // You can define this method to get a callback
    }

    /**
     * The type of the event.
     */
    @DataClass.Generated.Member
    public int getEventType() {
        return mEventType;
    }

    /**
     * A list of int or fixed point inputs required for metric computation.
     */
    @DataClass.Generated.Member
    public @Nullable long[] getIntInputs() {
        return mIntInputs;
    }

    /**
     * A list of floating point inputs required for metric computation.
     */
    @DataClass.Generated.Member
    public @Nullable double[] getFloatInputs() {
        return mFloatInputs;
    }

    @Override
    @DataClass.Generated.Member
    public boolean equals(@Nullable Object o) {
        // You can override field equality logic by defining either of the methods like:
        // boolean fieldNameEquals(EventMetricsInput other) { ... }
        // boolean fieldNameEquals(FieldType otherValue) { ... }

        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        @SuppressWarnings("unchecked")
        EventMetricsInput that = (EventMetricsInput) o;
        //noinspection PointlessBooleanExpression
        return true
                && mEventType == that.mEventType
                && java.util.Arrays.equals(mIntInputs, that.mIntInputs)
                && java.util.Arrays.equals(mFloatInputs, that.mFloatInputs);
    }

    @Override
    @DataClass.Generated.Member
    public int hashCode() {
        // You can override field hashCode logic by defining methods like:
        // int fieldNameHashCode() { ... }

        int _hash = 1;
        _hash = 31 * _hash + mEventType;
        _hash = 31 * _hash + java.util.Arrays.hashCode(mIntInputs);
        _hash = 31 * _hash + java.util.Arrays.hashCode(mFloatInputs);
        return _hash;
    }

    @Override
    @DataClass.Generated.Member
    public void writeToParcel(@android.annotation.NonNull android.os.Parcel dest, int flags) {
        // You can override field parcelling by defining methods like:
        // void parcelFieldName(Parcel dest, int flags) { ... }

        byte flg = 0;
        if (mIntInputs != null) flg |= 0x2;
        if (mFloatInputs != null) flg |= 0x4;
        dest.writeByte(flg);
        dest.writeInt(mEventType);
        if (mIntInputs != null) dest.writeLongArray(mIntInputs);
        if (mFloatInputs != null) dest.writeDoubleArray(mFloatInputs);
    }

    @Override
    @DataClass.Generated.Member
    public int describeContents() { return 0; }

    /** @hide */
    @SuppressWarnings({"unchecked", "RedundantCast"})
    @DataClass.Generated.Member
    /* package-private */ EventMetricsInput(@android.annotation.NonNull android.os.Parcel in) {
        // You can override field unparcelling by defining methods like:
        // static FieldType unparcelFieldName(Parcel in) { ... }

        byte flg = in.readByte();
        int eventType = in.readInt();
        long[] intInputs = (flg & 0x2) == 0 ? null : in.createLongArray();
        double[] floatInputs = (flg & 0x4) == 0 ? null : in.createDoubleArray();

        this.mEventType = eventType;
        this.mIntInputs = intInputs;
        this.mFloatInputs = floatInputs;

        // onConstructed(); // You can define this method to get a callback
    }

    @DataClass.Generated.Member
    public static final @android.annotation.NonNull Parcelable.Creator<EventMetricsInput> CREATOR
            = new Parcelable.Creator<EventMetricsInput>() {
        @Override
        public EventMetricsInput[] newArray(int size) {
            return new EventMetricsInput[size];
        }

        @Override
        public EventMetricsInput createFromParcel(@android.annotation.NonNull android.os.Parcel in) {
            return new EventMetricsInput(in);
        }
    };

    /**
     * A builder for {@link EventMetricsInput}
     */
    @SuppressWarnings("WeakerAccess")
    @DataClass.Generated.Member
    public static final class Builder {

        private int mEventType;
        private @Nullable long[] mIntInputs;
        private @Nullable double[] mFloatInputs;

        private long mBuilderFieldsSet = 0L;

        public Builder() {
        }

        /**
         * The type of the event.
         */
        @DataClass.Generated.Member
        public @android.annotation.NonNull Builder setEventType(int value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x1;
            mEventType = value;
            return this;
        }

        /**
         * A list of int or fixed point inputs required for metric computation.
         */
        @DataClass.Generated.Member
        public @android.annotation.NonNull Builder setIntInputs(@android.annotation.NonNull long... value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x2;
            mIntInputs = value;
            return this;
        }

        /**
         * A list of floating point inputs required for metric computation.
         */
        @DataClass.Generated.Member
        public @android.annotation.NonNull Builder setFloatInputs(@android.annotation.NonNull double... value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x4;
            mFloatInputs = value;
            return this;
        }

        /** Builds the instance. This builder should not be touched after calling this! */
        public @android.annotation.NonNull EventMetricsInput build() {
            checkNotUsed();
            mBuilderFieldsSet |= 0x8; // Mark builder used

            if ((mBuilderFieldsSet & 0x1) == 0) {
                mEventType = 0;
            }
            if ((mBuilderFieldsSet & 0x2) == 0) {
                mIntInputs = null;
            }
            if ((mBuilderFieldsSet & 0x4) == 0) {
                mFloatInputs = null;
            }
            EventMetricsInput o = new EventMetricsInput(
                    mEventType,
                    mIntInputs,
                    mFloatInputs);
            return o;
        }

        private void checkNotUsed() {
            if ((mBuilderFieldsSet & 0x8) != 0) {
                throw new IllegalStateException(
                        "This Builder should not be reused. Use a new Builder instance instead");
            }
        }
    }

    @DataClass.Generated(
            time = 1672952916238L,
            codegenVersion = "1.0.23",
            sourceFile = "packages/modules/OnDevicePersonalization/framework/java/android/ondevicepersonalization/EventMetricsInput.java",
            inputSignatures = "private  int mEventType\nprivate @android.annotation.Nullable long[] mIntInputs\nprivate @android.annotation.Nullable double[] mFloatInputs\nclass EventMetricsInput extends java.lang.Object implements [android.os.Parcelable]\n@com.android.ondevicepersonalization.internal.util.DataClass(genBuilder=true, genEqualsHashCode=true)")
    @Deprecated
    private void __metadata() {}


    //@formatter:on
    // End of generated code

}
