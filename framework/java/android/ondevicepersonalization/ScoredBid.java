/*
 * Copyright (C) 2022 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.ondevicepersonalization;

import android.annotation.NonNull;
import android.annotation.Nullable;
import android.os.Parcelable;

import com.android.ondevicepersonalization.internal.util.AnnotationValidations;
import com.android.ondevicepersonalization.internal.util.DataClass;

import java.util.List;

/**
 * A candidate to be rendered in response to a request from a calling app.
 *
 * @hide
 */
@DataClass(genBuilder = true, genEqualsHashCode = true)
public final class ScoredBid implements Parcelable {
    /**
     * A key in the REMOTE_DATA table that identifies this bid. This will be used
     * to fetch the bid data for rendering if this is a winning bid.
     */
    @NonNull private String mBidId = "";

    /**
     * The price to be paid, if this bid is a winner.
     */
    private double mPrice = 0.0;

    /**
     * The auction ranking for this bid.
     */
    private double mScore = 0.0;

    /**
     * The query level metrics to be logged.
     */
    @Nullable private Metrics mMetrics = null;

    /**
     * The parameters needed to compute event-level metrics, for each event type
     * which requires event level metrics. EventMetricsInput.mEventType must be
     * unique and valid for each entry in this list.
     */
    @Nullable private List<EventMetricsInput> mEventMetricsInputs = null;



    // Code below generated by codegen v1.0.23.
    //
    // DO NOT MODIFY!
    // CHECKSTYLE:OFF Generated code
    //
    // To regenerate run:
    // $ codegen $ANDROID_BUILD_TOP/packages/modules/OnDevicePersonalization/framework/java/android/ondevicepersonalization/ScoredBid.java
    //
    // To exclude the generated code from IntelliJ auto-formatting enable (one-time):
    //   Settings > Editor > Code Style > Formatter Control
    //@formatter:off


    @DataClass.Generated.Member
    /* package-private */ ScoredBid(
            @NonNull String bidId,
            double price,
            double score,
            @Nullable Metrics metrics,
            @Nullable List<EventMetricsInput> eventMetricsInputs) {
        this.mBidId = bidId;
        AnnotationValidations.validate(
                NonNull.class, null, mBidId);
        this.mPrice = price;
        this.mScore = score;
        this.mMetrics = metrics;
        this.mEventMetricsInputs = eventMetricsInputs;

        // onConstructed(); // You can define this method to get a callback
    }

    /**
     * A key in the REMOTE_DATA table that identifies this bid. This will be used
     * to fetch the bid data for rendering if this is a winning bid.
     */
    @DataClass.Generated.Member
    public @NonNull String getBidId() {
        return mBidId;
    }

    /**
     * The price to be paid, if this bid is a winner.
     */
    @DataClass.Generated.Member
    public double getPrice() {
        return mPrice;
    }

    /**
     * The auction ranking for this bid.
     */
    @DataClass.Generated.Member
    public double getScore() {
        return mScore;
    }

    /**
     * The query level metrics to be logged.
     */
    @DataClass.Generated.Member
    public @Nullable Metrics getMetrics() {
        return mMetrics;
    }

    /**
     * The parameters needed to compute event-level metrics, for each event type
     * which requires event level metrics. EventMetricsInput.mEventType must be
     * unique and valid for each entry in this list.
     */
    @DataClass.Generated.Member
    public @Nullable List<EventMetricsInput> getEventMetricsInputs() {
        return mEventMetricsInputs;
    }

    @Override
    @DataClass.Generated.Member
    public boolean equals(@Nullable Object o) {
        // You can override field equality logic by defining either of the methods like:
        // boolean fieldNameEquals(ScoredBid other) { ... }
        // boolean fieldNameEquals(FieldType otherValue) { ... }

        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        @SuppressWarnings("unchecked")
        ScoredBid that = (ScoredBid) o;
        //noinspection PointlessBooleanExpression
        return true
                && java.util.Objects.equals(mBidId, that.mBidId)
                && mPrice == that.mPrice
                && mScore == that.mScore
                && java.util.Objects.equals(mMetrics, that.mMetrics)
                && java.util.Objects.equals(mEventMetricsInputs, that.mEventMetricsInputs);
    }

    @Override
    @DataClass.Generated.Member
    public int hashCode() {
        // You can override field hashCode logic by defining methods like:
        // int fieldNameHashCode() { ... }

        int _hash = 1;
        _hash = 31 * _hash + java.util.Objects.hashCode(mBidId);
        _hash = 31 * _hash + Double.hashCode(mPrice);
        _hash = 31 * _hash + Double.hashCode(mScore);
        _hash = 31 * _hash + java.util.Objects.hashCode(mMetrics);
        _hash = 31 * _hash + java.util.Objects.hashCode(mEventMetricsInputs);
        return _hash;
    }

    @Override
    @DataClass.Generated.Member
    public void writeToParcel(@NonNull android.os.Parcel dest, int flags) {
        // You can override field parcelling by defining methods like:
        // void parcelFieldName(Parcel dest, int flags) { ... }

        byte flg = 0;
        if (mMetrics != null) flg |= 0x8;
        if (mEventMetricsInputs != null) flg |= 0x10;
        dest.writeByte(flg);
        dest.writeString(mBidId);
        dest.writeDouble(mPrice);
        dest.writeDouble(mScore);
        if (mMetrics != null) dest.writeTypedObject(mMetrics, flags);
        if (mEventMetricsInputs != null) dest.writeParcelableList(mEventMetricsInputs, flags);
    }

    @Override
    @DataClass.Generated.Member
    public int describeContents() { return 0; }

    /** @hide */
    @SuppressWarnings({"unchecked", "RedundantCast"})
    @DataClass.Generated.Member
    /* package-private */ ScoredBid(@NonNull android.os.Parcel in) {
        // You can override field unparcelling by defining methods like:
        // static FieldType unparcelFieldName(Parcel in) { ... }

        byte flg = in.readByte();
        String bidId = in.readString();
        double price = in.readDouble();
        double score = in.readDouble();
        Metrics metrics = (flg & 0x8) == 0 ? null : (Metrics) in.readTypedObject(Metrics.CREATOR);
        List<EventMetricsInput> eventMetricsInputs = null;
        if ((flg & 0x10) != 0) {
            eventMetricsInputs = new java.util.ArrayList<>();
            in.readParcelableList(eventMetricsInputs, EventMetricsInput.class.getClassLoader());
        }

        this.mBidId = bidId;
        AnnotationValidations.validate(
                NonNull.class, null, mBidId);
        this.mPrice = price;
        this.mScore = score;
        this.mMetrics = metrics;
        this.mEventMetricsInputs = eventMetricsInputs;

        // onConstructed(); // You can define this method to get a callback
    }

    @DataClass.Generated.Member
    public static final @NonNull Parcelable.Creator<ScoredBid> CREATOR
            = new Parcelable.Creator<ScoredBid>() {
        @Override
        public ScoredBid[] newArray(int size) {
            return new ScoredBid[size];
        }

        @Override
        public ScoredBid createFromParcel(@NonNull android.os.Parcel in) {
            return new ScoredBid(in);
        }
    };

    /**
     * A builder for {@link ScoredBid}
     */
    @SuppressWarnings("WeakerAccess")
    @DataClass.Generated.Member
    public static final class Builder {

        private @NonNull String mBidId;
        private double mPrice;
        private double mScore;
        private @Nullable Metrics mMetrics;
        private @Nullable List<EventMetricsInput> mEventMetricsInputs;

        private long mBuilderFieldsSet = 0L;

        public Builder() {
        }

        /**
         * A key in the REMOTE_DATA table that identifies this bid. This will be used
         * to fetch the bid data for rendering if this is a winning bid.
         */
        @DataClass.Generated.Member
        public @NonNull Builder setBidId(@NonNull String value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x1;
            mBidId = value;
            return this;
        }

        /**
         * The price to be paid, if this bid is a winner.
         */
        @DataClass.Generated.Member
        public @NonNull Builder setPrice(double value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x2;
            mPrice = value;
            return this;
        }

        /**
         * The auction ranking for this bid.
         */
        @DataClass.Generated.Member
        public @NonNull Builder setScore(double value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x4;
            mScore = value;
            return this;
        }

        /**
         * The query level metrics to be logged.
         */
        @DataClass.Generated.Member
        public @NonNull Builder setMetrics(@NonNull Metrics value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x8;
            mMetrics = value;
            return this;
        }

        /**
         * The parameters needed to compute event-level metrics, for each event type
         * which requires event level metrics. EventMetricsInput.mEventType must be
         * unique and valid for each entry in this list.
         */
        @DataClass.Generated.Member
        public @NonNull Builder setEventMetricsInputs(@NonNull List<EventMetricsInput> value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x10;
            mEventMetricsInputs = value;
            return this;
        }

        /** @see #setEventMetricsInputs */
        @DataClass.Generated.Member
        public @NonNull Builder addEventMetricsInputs(@NonNull EventMetricsInput value) {
            // You can refine this method's name by providing item's singular name, e.g.:
            // @DataClass.PluralOf("item")) mItems = ...

            if (mEventMetricsInputs == null) setEventMetricsInputs(new java.util.ArrayList<>());
            mEventMetricsInputs.add(value);
            return this;
        }

        /** Builds the instance. This builder should not be touched after calling this! */
        public @NonNull ScoredBid build() {
            checkNotUsed();
            mBuilderFieldsSet |= 0x20; // Mark builder used

            if ((mBuilderFieldsSet & 0x1) == 0) {
                mBidId = "";
            }
            if ((mBuilderFieldsSet & 0x2) == 0) {
                mPrice = 0.0;
            }
            if ((mBuilderFieldsSet & 0x4) == 0) {
                mScore = 0.0;
            }
            if ((mBuilderFieldsSet & 0x8) == 0) {
                mMetrics = null;
            }
            if ((mBuilderFieldsSet & 0x10) == 0) {
                mEventMetricsInputs = null;
            }
            ScoredBid o = new ScoredBid(
                    mBidId,
                    mPrice,
                    mScore,
                    mMetrics,
                    mEventMetricsInputs);
            return o;
        }

        private void checkNotUsed() {
            if ((mBuilderFieldsSet & 0x20) != 0) {
                throw new IllegalStateException(
                        "This Builder should not be reused. Use a new Builder instance instead");
            }
        }
    }

    @DataClass.Generated(
            time = 1672952598311L,
            codegenVersion = "1.0.23",
            sourceFile = "packages/modules/OnDevicePersonalization/framework/java/android/ondevicepersonalization/ScoredBid.java",
            inputSignatures = "private @android.annotation.NonNull java.lang.String mBidId\nprivate  double mPrice\nprivate  double mScore\nprivate @android.annotation.Nullable android.ondevicepersonalization.Metrics mMetrics\nprivate @android.annotation.Nullable java.util.List<android.ondevicepersonalization.EventMetricsInput> mEventMetricsInputs\nclass ScoredBid extends java.lang.Object implements [android.os.Parcelable]\n@com.android.ondevicepersonalization.internal.util.DataClass(genBuilder=true, genEqualsHashCode=true)")
    @Deprecated
    private void __metadata() {}


    //@formatter:on
    // End of generated code

}
