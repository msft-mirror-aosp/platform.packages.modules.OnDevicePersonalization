/*
 * Copyright (C) 2022 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.ondevicepersonalization;
import android.annotation.NonNull;
import android.os.Parcel;
import android.os.Parcelable;

import com.android.ondevicepersonalization.internal.util.AnnotationValidations;
import com.android.ondevicepersonalization.internal.util.DataClass;

import java.util.Objects;
/**
 * A Bid returned by a {@link Bidder}.
 *
 * @hide
 */
@DataClass(
        genBuilder = true,
        genEqualsHashCode = true
)
public final class Bid implements Parcelable {
    // TODO(b/228200518): Add remaining Bid fields.
    /**
     * The reporting id for this bid. Must be a key in the VendorData table for this bidder.
     */
    @NonNull private String mKey = "";

    /**
     * The bid price.
     */
    private double mPrice = 0.0;

    /**
     * The markup to be rendered if this bid wins the auction.
     */
    @NonNull private String mAdm = "";

    /**
     * The domain name of the advertiser.
     */
    @NonNull private String mAdomain = "";



    // Code below generated by codegen v1.0.23.
    //
    // DO NOT MODIFY!
    // CHECKSTYLE:OFF Generated code
    //
    // To regenerate run:
    // $ codegen $ANDROID_BUILD_TOP/packages/modules/OnDevicePersonalization/framework/java/android/ondevicepersonalization/Bid.java
    //
    // To exclude the generated code from IntelliJ auto-formatting enable (one-time):
    //   Settings > Editor > Code Style > Formatter Control
    //@formatter:off


    @DataClass.Generated.Member
    /* package-private */ Bid(
            @NonNull String key,
            double price,
            @NonNull String adm,
            @NonNull String adomain) {
        this.mKey = key;
        AnnotationValidations.validate(
                NonNull.class, null, mKey);
        this.mPrice = price;
        this.mAdm = adm;
        AnnotationValidations.validate(
                NonNull.class, null, mAdm);
        this.mAdomain = adomain;
        AnnotationValidations.validate(
                NonNull.class, null, mAdomain);

        // onConstructed(); // You can define this method to get a callback
    }

    /**
     * The reporting id for this bid. Must be a key in the VendorData table for this bidder.
     */
    @DataClass.Generated.Member
    public @NonNull String getKey() {
        return mKey;
    }

    /**
     * The bid price.
     */
    @DataClass.Generated.Member
    public double getPrice() {
        return mPrice;
    }

    /**
     * The markup to be rendered if this bid wins the auction.
     */
    @DataClass.Generated.Member
    public @NonNull String getAdm() {
        return mAdm;
    }

    /**
     * The domain name of the advertiser.
     */
    @DataClass.Generated.Member
    public @NonNull String getAdomain() {
        return mAdomain;
    }

    @Override
    @DataClass.Generated.Member
    public boolean equals(@android.annotation.Nullable Object o) {
        // You can override field equality logic by defining either of the methods like:
        // boolean fieldNameEquals(Bid other) { ... }
        // boolean fieldNameEquals(FieldType otherValue) { ... }

        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        @SuppressWarnings("unchecked")
        Bid that = (Bid) o;
        //noinspection PointlessBooleanExpression
        return true
                && Objects.equals(mKey, that.mKey)
                && mPrice == that.mPrice
                && Objects.equals(mAdm, that.mAdm)
                && Objects.equals(mAdomain, that.mAdomain);
    }

    @Override
    @DataClass.Generated.Member
    public int hashCode() {
        // You can override field hashCode logic by defining methods like:
        // int fieldNameHashCode() { ... }

        int _hash = 1;
        _hash = 31 * _hash + Objects.hashCode(mKey);
        _hash = 31 * _hash + Double.hashCode(mPrice);
        _hash = 31 * _hash + Objects.hashCode(mAdm);
        _hash = 31 * _hash + Objects.hashCode(mAdomain);
        return _hash;
    }

    @Override
    @DataClass.Generated.Member
    public void writeToParcel(@NonNull Parcel dest, int flags) {
        // You can override field parcelling by defining methods like:
        // void parcelFieldName(Parcel dest, int flags) { ... }

        dest.writeString(mKey);
        dest.writeDouble(mPrice);
        dest.writeString(mAdm);
        dest.writeString(mAdomain);
    }

    @Override
    @DataClass.Generated.Member
    public int describeContents() { return 0; }

    /** @hide */
    @SuppressWarnings({"unchecked", "RedundantCast"})
    @DataClass.Generated.Member
    /* package-private */ Bid(@NonNull Parcel in) {
        // You can override field unparcelling by defining methods like:
        // static FieldType unparcelFieldName(Parcel in) { ... }

        String key = in.readString();
        double price = in.readDouble();
        String adm = in.readString();
        String adomain = in.readString();

        this.mKey = key;
        AnnotationValidations.validate(
                NonNull.class, null, mKey);
        this.mPrice = price;
        this.mAdm = adm;
        AnnotationValidations.validate(
                NonNull.class, null, mAdm);
        this.mAdomain = adomain;
        AnnotationValidations.validate(
                NonNull.class, null, mAdomain);

        // onConstructed(); // You can define this method to get a callback
    }

    @DataClass.Generated.Member
    public static final @NonNull Parcelable.Creator<Bid> CREATOR
            = new Parcelable.Creator<Bid>() {
        @Override
        public Bid[] newArray(int size) {
            return new Bid[size];
        }

        @Override
        public Bid createFromParcel(@NonNull Parcel in) {
            return new Bid(in);
        }
    };

    /**
     * A builder for {@link Bid}
     */
    @SuppressWarnings("WeakerAccess")
    @DataClass.Generated.Member
    public static final class Builder {

        private @NonNull String mKey;
        private double mPrice;
        private @NonNull String mAdm;
        private @NonNull String mAdomain;

        private long mBuilderFieldsSet = 0L;

        public Builder() {
        }

        /**
         * The reporting id for this bid. Must be a key in the VendorData table for this bidder.
         */
        @DataClass.Generated.Member
        public @NonNull Builder setKey(@NonNull String value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x1;
            mKey = value;
            return this;
        }

        /**
         * The bid price.
         */
        @DataClass.Generated.Member
        public @NonNull Builder setPrice(double value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x2;
            mPrice = value;
            return this;
        }

        /**
         * The markup to be rendered if this bid wins the auction.
         */
        @DataClass.Generated.Member
        public @NonNull Builder setAdm(@NonNull String value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x4;
            mAdm = value;
            return this;
        }

        /**
         * The domain name of the advertiser.
         */
        @DataClass.Generated.Member
        public @NonNull Builder setAdomain(@NonNull String value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x8;
            mAdomain = value;
            return this;
        }

        /** Builds the instance. This builder should not be touched after calling this! */
        public @NonNull Bid build() {
            checkNotUsed();
            mBuilderFieldsSet |= 0x10; // Mark builder used

            if ((mBuilderFieldsSet & 0x1) == 0) {
                mKey = "";
            }
            if ((mBuilderFieldsSet & 0x2) == 0) {
                mPrice = 0.0;
            }
            if ((mBuilderFieldsSet & 0x4) == 0) {
                mAdm = "";
            }
            if ((mBuilderFieldsSet & 0x8) == 0) {
                mAdomain = "";
            }
            Bid o = new Bid(
                    mKey,
                    mPrice,
                    mAdm,
                    mAdomain);
            return o;
        }

        private void checkNotUsed() {
            if ((mBuilderFieldsSet & 0x10) != 0) {
                throw new IllegalStateException(
                        "This Builder should not be reused. Use a new Builder instance instead");
            }
        }
    }

    @DataClass.Generated(
            time = 1657657904256L,
            codegenVersion = "1.0.23",
            sourceFile = "packages/modules/OnDevicePersonalization/framework/java/android/ondevicepersonalization/Bid.java",
            inputSignatures = "private @android.annotation.NonNull java.lang.String mKey\nprivate  double mPrice\nprivate @android.annotation.NonNull java.lang.String mAdm\nprivate @android.annotation.NonNull java.lang.String mAdomain\nclass Bid extends java.lang.Object implements [android.os.Parcelable]\n@com.android.ondevicepersonalization.internal.util.DataClass(genBuilder=true, genEqualsHashCode=true)")
    @Deprecated
    private void __metadata() {}


    //@formatter:on
    // End of generated code

}
