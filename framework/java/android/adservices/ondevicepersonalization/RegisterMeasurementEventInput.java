/*
 * Copyright (C) 2022 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.adservices.ondevicepersonalization;

import android.annotation.FlaggedApi;
import android.annotation.IntDef;
import android.annotation.Nullable;
import android.net.Uri;

import com.android.adservices.ondevicepersonalization.flags.Flags;
import com.android.ondevicepersonalization.internal.util.AnnotationValidations;
import com.android.ondevicepersonalization.internal.util.DataClass;

import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;

/**
 * A data class that contains the information needed for a call to
 * {@link OnDevicePersonalizationSystemEventManager#registerMeasurementEvent(RegisterMeasurementEventInput, Executor, android.os.OutcomeReceiver)}.
 *
 * @hide
 */
@FlaggedApi(Flags.FLAG_ON_DEVICE_PERSONALIZATION_APIS_ENABLED)
@DataClass(genBuilder = true, genConstDefs = false, genEqualsHashCode = true)
public final class RegisterMeasurementEventInput {
    /** Indicates that the measurement event is a Web Trigger event. */
    public static final int MEASUREMENT_EVENT_WEB_TRIGGER = 1;

    /** @hide */
    @IntDef(prefix = "MEASUREMENT_EVENT_", value = {
            MEASUREMENT_EVENT_WEB_TRIGGER
    })
    @Retention(RetentionPolicy.SOURCE)
    public @interface MeasurementEvent {}

    /**
     * The type of the measurement event. If the value is set to
     * {@link #MEASUREMENT_EVENT_WEB_TRIGGER}, then {@link #getDestinationUrl()},
     * {@link #getAppPackageName()} and {@link #getEventData()} must be non-null.
     */
    private final @MeasurementEvent int mType;

    /** The URL of the web page where the event occurred. */
    @Nullable private Uri mDestinationUrl = null;

    /** The package name of the browser app where the event occurred. */
    @Nullable private String mAppPackageName = null;

    /**
     * The event payload data that was returned by the web server.
     * For an event of type {@link #MEASUREMENT_EVENT_WEB_TRIGGER}, this field must
     * be a JSON Object with the following keys.
     * <ul>
     * <li>package: package name of the {@link IsolatedService} that should receive this event</li>
     * <li>class: class name of the {@link IsolatedService} that should receive this event</li>
     * <li>cert_digest: a SHA-256 hash of the signing key of the package that contains the {@link IsolatedService}</li>
     * <li>data: the data to be passed to the {@link IsolatedService}</li>
     * </ul>
     */
    @Nullable private String mEventData = null;



    // Code below generated by codegen v1.0.23.
    //
    // DO NOT MODIFY!
    // CHECKSTYLE:OFF Generated code
    //
    // To regenerate run:
    // $ codegen $ANDROID_BUILD_TOP/packages/modules/OnDevicePersonalization/framework/java/android/adservices/ondevicepersonalization/RegisterMeasurementEventInput.java
    //
    // To exclude the generated code from IntelliJ auto-formatting enable (one-time):
    //   Settings > Editor > Code Style > Formatter Control
    //@formatter:off


    @DataClass.Generated.Member
    /* package-private */ RegisterMeasurementEventInput(
            @MeasurementEvent int type,
            @Nullable Uri destinationUrl,
            @Nullable String appPackageName,
            @Nullable String eventData) {
        this.mType = type;
        AnnotationValidations.validate(
                MeasurementEvent.class, null, mType);
        this.mDestinationUrl = destinationUrl;
        this.mAppPackageName = appPackageName;
        this.mEventData = eventData;

        // onConstructed(); // You can define this method to get a callback
    }

    /**
     * The type of the measurement event. If the value is set to
     * {@link #MEASUREMENT_EVENT_WEB_TRIGGER}, then {@link #getDestinationUrl()},
     * {@link #getAppPackageName()} and {@link #getEventData()} must be non-null.
     */
    @DataClass.Generated.Member
    public @MeasurementEvent int getType() {
        return mType;
    }

    /**
     * The URL of the web page where the event occurred.
     */
    @DataClass.Generated.Member
    public @Nullable Uri getDestinationUrl() {
        return mDestinationUrl;
    }

    /**
     * The package name of the browser app where the event occurred.
     */
    @DataClass.Generated.Member
    public @Nullable String getAppPackageName() {
        return mAppPackageName;
    }

    /**
     * The event payload data that was returned by the web server.
     * For an event of type {@link #MEASUREMENT_EVENT_WEB_TRIGGER}, this field must
     * be a JSON Object with the following keys.
     * <ul>
     * <li>package: package name of the {@link IsolatedService} that should receive this event</li>
     * <li>class: class name of the {@link IsolatedService} that should receive this event</li>
     * <li>cert_digest: a SHA-256 hash of the signing key of the package that contains the {@link IsolatedService}</li>
     * <li>data: the data to be passed to the {@link IsolatedService}</li>
     * </ul>
     */
    @DataClass.Generated.Member
    public @Nullable String getEventData() {
        return mEventData;
    }

    @Override
    @DataClass.Generated.Member
    public boolean equals(@Nullable Object o) {
        // You can override field equality logic by defining either of the methods like:
        // boolean fieldNameEquals(RegisterMeasurementEventInput other) { ... }
        // boolean fieldNameEquals(FieldType otherValue) { ... }

        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        @SuppressWarnings("unchecked")
        RegisterMeasurementEventInput that = (RegisterMeasurementEventInput) o;
        //noinspection PointlessBooleanExpression
        return true
                && mType == that.mType
                && java.util.Objects.equals(mDestinationUrl, that.mDestinationUrl)
                && java.util.Objects.equals(mAppPackageName, that.mAppPackageName)
                && java.util.Objects.equals(mEventData, that.mEventData);
    }

    @Override
    @DataClass.Generated.Member
    public int hashCode() {
        // You can override field hashCode logic by defining methods like:
        // int fieldNameHashCode() { ... }

        int _hash = 1;
        _hash = 31 * _hash + mType;
        _hash = 31 * _hash + java.util.Objects.hashCode(mDestinationUrl);
        _hash = 31 * _hash + java.util.Objects.hashCode(mAppPackageName);
        _hash = 31 * _hash + java.util.Objects.hashCode(mEventData);
        return _hash;
    }

    /**
     * A builder for {@link RegisterMeasurementEventInput}
     */
    @SuppressWarnings("WeakerAccess")
    @DataClass.Generated.Member
    public static final class Builder {

        private @MeasurementEvent int mType;
        private @Nullable Uri mDestinationUrl;
        private @Nullable String mAppPackageName;
        private @Nullable String mEventData;

        private long mBuilderFieldsSet = 0L;

        /**
         * Creates a new Builder.
         *
         * @param type
         *   The type of the measurement event. If the value is set to
         *   {@link #MEASUREMENT_EVENT_WEB_TRIGGER}, then {@link #getDestinationUrl()},
         *   {@link #getAppPackageName()} and {@link #getEventData()} must be non-null.
         */
        public Builder(
                @MeasurementEvent int type) {
            mType = type;
            AnnotationValidations.validate(
                    MeasurementEvent.class, null, mType);
        }

        /**
         * The type of the measurement event. If the value is set to
         * {@link #MEASUREMENT_EVENT_WEB_TRIGGER}, then {@link #getDestinationUrl()},
         * {@link #getAppPackageName()} and {@link #getEventData()} must be non-null.
         */
        @DataClass.Generated.Member
        public @android.annotation.NonNull Builder setType(@MeasurementEvent int value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x1;
            mType = value;
            return this;
        }

        /**
         * The URL of the web page where the event occurred.
         */
        @DataClass.Generated.Member
        public @android.annotation.NonNull Builder setDestinationUrl(@android.annotation.NonNull Uri value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x2;
            mDestinationUrl = value;
            return this;
        }

        /**
         * The package name of the browser app where the event occurred.
         */
        @DataClass.Generated.Member
        public @android.annotation.NonNull Builder setAppPackageName(@android.annotation.NonNull String value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x4;
            mAppPackageName = value;
            return this;
        }

        /**
         * The event payload data that was returned by the web server.
         * For an event of type {@link #MEASUREMENT_EVENT_WEB_TRIGGER}, this field must
         * be a JSON Object with the following keys.
         * <ul>
         * <li>package: package name of the {@link IsolatedService} that should receive this event</li>
         * <li>class: class name of the {@link IsolatedService} that should receive this event</li>
         * <li>cert_digest: a SHA-256 hash of the signing key of the package that contains the {@link IsolatedService}</li>
         * <li>data: the data to be passed to the {@link IsolatedService}</li>
         * </ul>
         */
        @DataClass.Generated.Member
        public @android.annotation.NonNull Builder setEventData(@android.annotation.NonNull String value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x8;
            mEventData = value;
            return this;
        }

        /** Builds the instance. This builder should not be touched after calling this! */
        public @android.annotation.NonNull RegisterMeasurementEventInput build() {
            checkNotUsed();
            mBuilderFieldsSet |= 0x10; // Mark builder used

            if ((mBuilderFieldsSet & 0x2) == 0) {
                mDestinationUrl = null;
            }
            if ((mBuilderFieldsSet & 0x4) == 0) {
                mAppPackageName = null;
            }
            if ((mBuilderFieldsSet & 0x8) == 0) {
                mEventData = null;
            }
            RegisterMeasurementEventInput o = new RegisterMeasurementEventInput(
                    mType,
                    mDestinationUrl,
                    mAppPackageName,
                    mEventData);
            return o;
        }

        private void checkNotUsed() {
            if ((mBuilderFieldsSet & 0x10) != 0) {
                throw new IllegalStateException(
                        "This Builder should not be reused. Use a new Builder instance instead");
            }
        }
    }

    @DataClass.Generated(
            time = 1707183379584L,
            codegenVersion = "1.0.23",
            sourceFile = "packages/modules/OnDevicePersonalization/framework/java/android/adservices/ondevicepersonalization/RegisterMeasurementEventInput.java",
            inputSignatures = "public static final  int MEASUREMENT_EVENT_WEB_TRIGGER\nprivate final @android.adservices.ondevicepersonalization.RegisterMeasurementEventInput.MeasurementEvent int mType\nprivate @android.annotation.Nullable android.net.Uri mDestinationUrl\nprivate @android.annotation.Nullable java.lang.String mAppPackageName\nprivate @android.annotation.Nullable java.lang.String mEventData\nclass RegisterMeasurementEventInput extends java.lang.Object implements []\n@com.android.ondevicepersonalization.internal.util.DataClass(genBuilder=true, genConstDefs=false, genEqualsHashCode=true)")
    @Deprecated
    private void __metadata() {}


    //@formatter:on
    // End of generated code

}
