/*
 * Copyright (C) 2022 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.adservices.ondevicepersonalization;

import android.annotation.NonNull;
import android.os.Parcelable;

import com.android.ondevicepersonalization.internal.util.AnnotationValidations;
import com.android.ondevicepersonalization.internal.util.DataClass;

import java.util.function.Consumer;

/**
 * The input data for {@link IsolatedWorker#onTrainingExample(ExampleInput, Consumer)}
 *
 * @hide
 */
@DataClass(genBuilder = true, genEqualsHashCode = true)
public class ExampleInput implements Parcelable  {
    /** Name of the federated compute task. */
    @NonNull private final String mPopulationName;

    /**
     * One population may have multiple tasks. Task name can be used to uniquely identify the job.
     */
    @NonNull private final String mTaskName;

    /**
     * The name of data collection to read from, specified by the federated task plan configured at
     * federated computation server.
     */
    @NonNull private final String mCollectionName;

    /** Input data to create example from. Represents a single joined log record. */
    @NonNull private final JoinedLogRecord mInputData;




    // Code below generated by codegen v1.0.23.
    //
    // DO NOT MODIFY!
    // CHECKSTYLE:OFF Generated code
    //
    // To regenerate run:
    // $ codegen $ANDROID_BUILD_TOP/packages/modules/OnDevicePersonalization/framework/java/android/adservices/ondevicepersonalization/ExampleInput.java
    //
    // To exclude the generated code from IntelliJ auto-formatting enable (one-time):
    //   Settings > Editor > Code Style > Formatter Control
    //@formatter:off


    @DataClass.Generated.Member
    /* package-private */ ExampleInput(
            @NonNull String populationName,
            @NonNull String taskName,
            @NonNull String collectionName,
            @NonNull JoinedLogRecord inputData) {
        this.mPopulationName = populationName;
        AnnotationValidations.validate(
                NonNull.class, null, mPopulationName);
        this.mTaskName = taskName;
        AnnotationValidations.validate(
                NonNull.class, null, mTaskName);
        this.mCollectionName = collectionName;
        AnnotationValidations.validate(
                NonNull.class, null, mCollectionName);
        this.mInputData = inputData;
        AnnotationValidations.validate(
                NonNull.class, null, mInputData);

        // onConstructed(); // You can define this method to get a callback
    }

    /**
     * Name of the federated compute task.
     */
    @DataClass.Generated.Member
    public @NonNull String getPopulationName() {
        return mPopulationName;
    }

    /**
     * One population may have multiple tasks. Task name can be used to uniquely identify the job.
     */
    @DataClass.Generated.Member
    public @NonNull String getTaskName() {
        return mTaskName;
    }

    /**
     * The name of data collection to read from, specified by the federated task plan configured at
     * federated computation server.
     */
    @DataClass.Generated.Member
    public @NonNull String getCollectionName() {
        return mCollectionName;
    }

    /**
     * Input data to create example from. Represents a single joined log record.
     */
    @DataClass.Generated.Member
    public @NonNull JoinedLogRecord getInputData() {
        return mInputData;
    }

    @Override
    @DataClass.Generated.Member
    public boolean equals(@android.annotation.Nullable Object o) {
        // You can override field equality logic by defining either of the methods like:
        // boolean fieldNameEquals(ExampleInput other) { ... }
        // boolean fieldNameEquals(FieldType otherValue) { ... }

        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        @SuppressWarnings("unchecked")
        ExampleInput that = (ExampleInput) o;
        //noinspection PointlessBooleanExpression
        return true
                && java.util.Objects.equals(mPopulationName, that.mPopulationName)
                && java.util.Objects.equals(mTaskName, that.mTaskName)
                && java.util.Objects.equals(mCollectionName, that.mCollectionName)
                && java.util.Objects.equals(mInputData, that.mInputData);
    }

    @Override
    @DataClass.Generated.Member
    public int hashCode() {
        // You can override field hashCode logic by defining methods like:
        // int fieldNameHashCode() { ... }

        int _hash = 1;
        _hash = 31 * _hash + java.util.Objects.hashCode(mPopulationName);
        _hash = 31 * _hash + java.util.Objects.hashCode(mTaskName);
        _hash = 31 * _hash + java.util.Objects.hashCode(mCollectionName);
        _hash = 31 * _hash + java.util.Objects.hashCode(mInputData);
        return _hash;
    }

    @Override
    @DataClass.Generated.Member
    public void writeToParcel(@NonNull android.os.Parcel dest, int flags) {
        // You can override field parcelling by defining methods like:
        // void parcelFieldName(Parcel dest, int flags) { ... }

        dest.writeString(mPopulationName);
        dest.writeString(mTaskName);
        dest.writeString(mCollectionName);
        dest.writeTypedObject(mInputData, flags);
    }

    @Override
    @DataClass.Generated.Member
    public int describeContents() { return 0; }

    /** @hide */
    @SuppressWarnings({"unchecked", "RedundantCast"})
    @DataClass.Generated.Member
    protected ExampleInput(@NonNull android.os.Parcel in) {
        // You can override field unparcelling by defining methods like:
        // static FieldType unparcelFieldName(Parcel in) { ... }

        String populationName = in.readString();
        String taskName = in.readString();
        String collectionName = in.readString();
        JoinedLogRecord inputData = (JoinedLogRecord) in.readTypedObject(JoinedLogRecord.CREATOR);

        this.mPopulationName = populationName;
        AnnotationValidations.validate(
                NonNull.class, null, mPopulationName);
        this.mTaskName = taskName;
        AnnotationValidations.validate(
                NonNull.class, null, mTaskName);
        this.mCollectionName = collectionName;
        AnnotationValidations.validate(
                NonNull.class, null, mCollectionName);
        this.mInputData = inputData;
        AnnotationValidations.validate(
                NonNull.class, null, mInputData);

        // onConstructed(); // You can define this method to get a callback
    }

    @DataClass.Generated.Member
    public static final @NonNull Parcelable.Creator<ExampleInput> CREATOR
            = new Parcelable.Creator<ExampleInput>() {
        @Override
        public ExampleInput[] newArray(int size) {
            return new ExampleInput[size];
        }

        @Override
        public ExampleInput createFromParcel(@NonNull android.os.Parcel in) {
            return new ExampleInput(in);
        }
    };

    /**
     * A builder for {@link ExampleInput}
     * @hide
     */
    @SuppressWarnings("WeakerAccess")
    @DataClass.Generated.Member
    public static class Builder {

        private @NonNull String mPopulationName;
        private @NonNull String mTaskName;
        private @NonNull String mCollectionName;
        private @NonNull JoinedLogRecord mInputData;

        private long mBuilderFieldsSet = 0L;

        public Builder() {
        }

        /**
         * Creates a new Builder.
         *
         * @param populationName
         *   Name of the federated compute task.
         * @param taskName
         *   One population may have multiple tasks. Task name can be used to uniquely identify the job.
         * @param collectionName
         *   The name of data collection to read from, specified by the federated task plan configured at
         *   federated computation server.
         * @param inputData
         *   Input data to create example from. Represents a single joined log record.
         */
        public Builder(
                @NonNull String populationName,
                @NonNull String taskName,
                @NonNull String collectionName,
                @NonNull JoinedLogRecord inputData) {
            mPopulationName = populationName;
            AnnotationValidations.validate(
                    NonNull.class, null, mPopulationName);
            mTaskName = taskName;
            AnnotationValidations.validate(
                    NonNull.class, null, mTaskName);
            mCollectionName = collectionName;
            AnnotationValidations.validate(
                    NonNull.class, null, mCollectionName);
            mInputData = inputData;
            AnnotationValidations.validate(
                    NonNull.class, null, mInputData);
        }

        /**
         * Name of the federated compute task.
         */
        @DataClass.Generated.Member
        public @NonNull Builder setPopulationName(@NonNull String value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x1;
            mPopulationName = value;
            return this;
        }

        /**
         * One population may have multiple tasks. Task name can be used to uniquely identify the job.
         */
        @DataClass.Generated.Member
        public @NonNull Builder setTaskName(@NonNull String value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x2;
            mTaskName = value;
            return this;
        }

        /**
         * The name of data collection to read from, specified by the federated task plan configured at
         * federated computation server.
         */
        @DataClass.Generated.Member
        public @NonNull Builder setCollectionName(@NonNull String value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x4;
            mCollectionName = value;
            return this;
        }

        /**
         * Input data to create example from. Represents a single joined log record.
         */
        @DataClass.Generated.Member
        public @NonNull Builder setInputData(@NonNull JoinedLogRecord value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x8;
            mInputData = value;
            return this;
        }

        /** Builds the instance. This builder should not be touched after calling this! */
        public @NonNull ExampleInput build() {
            checkNotUsed();
            mBuilderFieldsSet |= 0x10; // Mark builder used

            ExampleInput o = new ExampleInput(
                    mPopulationName,
                    mTaskName,
                    mCollectionName,
                    mInputData);
            return o;
        }

        private void checkNotUsed() {
            if ((mBuilderFieldsSet & 0x10) != 0) {
                throw new IllegalStateException(
                        "This Builder should not be reused. Use a new Builder instance instead");
            }
        }
    }

    @DataClass.Generated(
            time = 1695411754229L,
            codegenVersion = "1.0.23",
            sourceFile = "packages/modules/OnDevicePersonalization/framework/java/android/adservices/ondevicepersonalization/ExampleInput.java",
            inputSignatures = "private final @android.annotation.NonNull java.lang.String mPopulationName\nprivate final @android.annotation.NonNull java.lang.String mTaskName\nprivate final @android.annotation.NonNull java.lang.String mCollectionName\nprivate final @android.annotation.NonNull android.adservices.ondevicepersonalization.JoinedLogRecord mInputData\nclass ExampleInput extends java.lang.Object implements [android.os.Parcelable]\n@com.android.ondevicepersonalization.internal.util.DataClass(genBuilder=true, genEqualsHashCode=true)")
    @Deprecated
    private void __metadata() {}


    //@formatter:on
    // End of generated code

}
