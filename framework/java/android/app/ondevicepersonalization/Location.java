/*
 * Copyright (C) 2022 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package android.app.ondevicepersonalization;

import android.annotation.IntDef;
import android.annotation.NonNull;
import android.os.Parcelable;

import com.android.ondevicepersonalization.internal.util.DataClass;

import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;

/**
 * Most recently known location info.
 *
 * @hide
 */
@DataClass(genBuilder = true, genEqualsHashCode = true)
public final class Location implements Parcelable {
    static final Location EMPTY;

    static {
        EMPTY = new Builder().build();
    }

    /** Timestamp of when this location is collected. */
    long mTimestampSeconds = 0;

    /** Location latitude with E4 precision. */
    double mLatitude = 0.0;

    /** Location longitude with E4 precision. */
    double mLongitude = 0.0;

    /** @hide */
    @IntDef(prefix = {"LOCATION_PROVIDER_TYPE_"}, value = {
        LOCATION_PROVIDER_TYPE_UNKNOWN,
        LOCATION_PROVIDER_TYPE_GPS,
        LOCATION_PROVIDER_TYPE_NETWORK
    })
    @Retention(RetentionPolicy.SOURCE)
    public @interface LocationProviderType {}

    /** Location provider unknown. */
    public static final int LOCATION_PROVIDER_TYPE_UNKNOWN = 0;
    /** Location provider GPS. */
    public static final int LOCATION_PROVIDER_TYPE_GPS = 1;
    /** Location provider network. */
    public static final int LOCATION_PROVIDER_TYPE_NETWORK = 2;

    /** Location provider. */
    @LocationProviderType int mLocationProvider = LOCATION_PROVIDER_TYPE_UNKNOWN;

    /** Whether the location source is precise. */
    boolean mPreciseLocation = false;



    // Code below generated by codegen v1.0.23.
    //
    // DO NOT MODIFY!
    // CHECKSTYLE:OFF Generated code
    //
    // To regenerate run:
    // $ codegen $ANDROID_BUILD_TOP/packages/modules/OnDevicePersonalization/framework/java/android/app/ondevicepersonalization/Location.java
    //
    // To exclude the generated code from IntelliJ auto-formatting enable (one-time):
    //   Settings > Editor > Code Style > Formatter Control
    //@formatter:off


    @DataClass.Generated.Member
    public static String locationProviderTypeToString(@LocationProviderType int value) {
        switch (value) {
            case LOCATION_PROVIDER_TYPE_UNKNOWN:
                    return "LOCATION_PROVIDER_TYPE_UNKNOWN";
            case LOCATION_PROVIDER_TYPE_GPS:
                    return "LOCATION_PROVIDER_TYPE_GPS";
            case LOCATION_PROVIDER_TYPE_NETWORK:
                    return "LOCATION_PROVIDER_TYPE_NETWORK";
            default: return Integer.toHexString(value);
        }
    }

    @DataClass.Generated.Member
    /* package-private */ Location(
            long timestampSeconds,
            double latitude,
            double longitude,
            @LocationProviderType int locationProvider,
            boolean preciseLocation) {
        this.mTimestampSeconds = timestampSeconds;
        this.mLatitude = latitude;
        this.mLongitude = longitude;
        this.mLocationProvider = locationProvider;

        if (!(mLocationProvider == LOCATION_PROVIDER_TYPE_UNKNOWN)
                && !(mLocationProvider == LOCATION_PROVIDER_TYPE_GPS)
                && !(mLocationProvider == LOCATION_PROVIDER_TYPE_NETWORK)) {
            throw new java.lang.IllegalArgumentException(
                    "locationProvider was " + mLocationProvider + " but must be one of: "
                            + "LOCATION_PROVIDER_TYPE_UNKNOWN(" + LOCATION_PROVIDER_TYPE_UNKNOWN + "), "
                            + "LOCATION_PROVIDER_TYPE_GPS(" + LOCATION_PROVIDER_TYPE_GPS + "), "
                            + "LOCATION_PROVIDER_TYPE_NETWORK(" + LOCATION_PROVIDER_TYPE_NETWORK + ")");
        }

        this.mPreciseLocation = preciseLocation;

        // onConstructed(); // You can define this method to get a callback
    }

    /**
     * Timestamp of when this location is collected.
     */
    @DataClass.Generated.Member
    public long getTimestampSeconds() {
        return mTimestampSeconds;
    }

    /**
     * Location latitude with E4 precision.
     */
    @DataClass.Generated.Member
    public double getLatitude() {
        return mLatitude;
    }

    /**
     * Location longitude with E4 precision.
     */
    @DataClass.Generated.Member
    public double getLongitude() {
        return mLongitude;
    }

    /**
     * Location provider.
     */
    @DataClass.Generated.Member
    public @LocationProviderType int getLocationProvider() {
        return mLocationProvider;
    }

    /**
     * Whether the location source is precise.
     */
    @DataClass.Generated.Member
    public boolean isPreciseLocation() {
        return mPreciseLocation;
    }

    @Override
    @DataClass.Generated.Member
    public boolean equals(@android.annotation.Nullable Object o) {
        // You can override field equality logic by defining either of the methods like:
        // boolean fieldNameEquals(Location other) { ... }
        // boolean fieldNameEquals(FieldType otherValue) { ... }

        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        @SuppressWarnings("unchecked")
        Location that = (Location) o;
        //noinspection PointlessBooleanExpression
        return true
                && mTimestampSeconds == that.mTimestampSeconds
                && mLatitude == that.mLatitude
                && mLongitude == that.mLongitude
                && mLocationProvider == that.mLocationProvider
                && mPreciseLocation == that.mPreciseLocation;
    }

    @Override
    @DataClass.Generated.Member
    public int hashCode() {
        // You can override field hashCode logic by defining methods like:
        // int fieldNameHashCode() { ... }

        int _hash = 1;
        _hash = 31 * _hash + Long.hashCode(mTimestampSeconds);
        _hash = 31 * _hash + Double.hashCode(mLatitude);
        _hash = 31 * _hash + Double.hashCode(mLongitude);
        _hash = 31 * _hash + mLocationProvider;
        _hash = 31 * _hash + Boolean.hashCode(mPreciseLocation);
        return _hash;
    }

    @Override
    @DataClass.Generated.Member
    public void writeToParcel(@NonNull android.os.Parcel dest, int flags) {
        // You can override field parcelling by defining methods like:
        // void parcelFieldName(Parcel dest, int flags) { ... }

        byte flg = 0;
        if (mPreciseLocation) flg |= 0x10;
        dest.writeByte(flg);
        dest.writeLong(mTimestampSeconds);
        dest.writeDouble(mLatitude);
        dest.writeDouble(mLongitude);
        dest.writeInt(mLocationProvider);
    }

    @Override
    @DataClass.Generated.Member
    public int describeContents() { return 0; }

    /** @hide */
    @SuppressWarnings({"unchecked", "RedundantCast"})
    @DataClass.Generated.Member
    /* package-private */ Location(@NonNull android.os.Parcel in) {
        // You can override field unparcelling by defining methods like:
        // static FieldType unparcelFieldName(Parcel in) { ... }

        byte flg = in.readByte();
        boolean preciseLocation = (flg & 0x10) != 0;
        long timestampSeconds = in.readLong();
        double latitude = in.readDouble();
        double longitude = in.readDouble();
        int locationProvider = in.readInt();

        this.mTimestampSeconds = timestampSeconds;
        this.mLatitude = latitude;
        this.mLongitude = longitude;
        this.mLocationProvider = locationProvider;

        if (!(mLocationProvider == LOCATION_PROVIDER_TYPE_UNKNOWN)
                && !(mLocationProvider == LOCATION_PROVIDER_TYPE_GPS)
                && !(mLocationProvider == LOCATION_PROVIDER_TYPE_NETWORK)) {
            throw new java.lang.IllegalArgumentException(
                    "locationProvider was " + mLocationProvider + " but must be one of: "
                            + "LOCATION_PROVIDER_TYPE_UNKNOWN(" + LOCATION_PROVIDER_TYPE_UNKNOWN + "), "
                            + "LOCATION_PROVIDER_TYPE_GPS(" + LOCATION_PROVIDER_TYPE_GPS + "), "
                            + "LOCATION_PROVIDER_TYPE_NETWORK(" + LOCATION_PROVIDER_TYPE_NETWORK + ")");
        }

        this.mPreciseLocation = preciseLocation;

        // onConstructed(); // You can define this method to get a callback
    }

    @DataClass.Generated.Member
    public static final @NonNull Parcelable.Creator<Location> CREATOR
            = new Parcelable.Creator<Location>() {
        @Override
        public Location[] newArray(int size) {
            return new Location[size];
        }

        @Override
        public Location createFromParcel(@NonNull android.os.Parcel in) {
            return new Location(in);
        }
    };

    /**
     * A builder for {@link Location}
     */
    @SuppressWarnings("WeakerAccess")
    @DataClass.Generated.Member
    public static final class Builder {

        private long mTimestampSeconds;
        private double mLatitude;
        private double mLongitude;
        private @LocationProviderType int mLocationProvider;
        private boolean mPreciseLocation;

        private long mBuilderFieldsSet = 0L;

        public Builder() {
        }

        /**
         * Timestamp of when this location is collected.
         */
        @DataClass.Generated.Member
        public @NonNull Builder setTimestampSeconds(long value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x1;
            mTimestampSeconds = value;
            return this;
        }

        /**
         * Location latitude with E4 precision.
         */
        @DataClass.Generated.Member
        public @NonNull Builder setLatitude(double value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x2;
            mLatitude = value;
            return this;
        }

        /**
         * Location longitude with E4 precision.
         */
        @DataClass.Generated.Member
        public @NonNull Builder setLongitude(double value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x4;
            mLongitude = value;
            return this;
        }

        /**
         * Location provider.
         */
        @DataClass.Generated.Member
        public @NonNull Builder setLocationProvider(@LocationProviderType int value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x8;
            mLocationProvider = value;
            return this;
        }

        /**
         * Whether the location source is precise.
         */
        @DataClass.Generated.Member
        public @NonNull Builder setPreciseLocation(boolean value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x10;
            mPreciseLocation = value;
            return this;
        }

        /** Builds the instance. This builder should not be touched after calling this! */
        public @NonNull Location build() {
            checkNotUsed();
            mBuilderFieldsSet |= 0x20; // Mark builder used

            if ((mBuilderFieldsSet & 0x1) == 0) {
                mTimestampSeconds = 0;
            }
            if ((mBuilderFieldsSet & 0x2) == 0) {
                mLatitude = 0.0;
            }
            if ((mBuilderFieldsSet & 0x4) == 0) {
                mLongitude = 0.0;
            }
            if ((mBuilderFieldsSet & 0x8) == 0) {
                mLocationProvider = LOCATION_PROVIDER_TYPE_UNKNOWN;
            }
            if ((mBuilderFieldsSet & 0x10) == 0) {
                mPreciseLocation = false;
            }
            Location o = new Location(
                    mTimestampSeconds,
                    mLatitude,
                    mLongitude,
                    mLocationProvider,
                    mPreciseLocation);
            return o;
        }

        private void checkNotUsed() {
            if ((mBuilderFieldsSet & 0x20) != 0) {
                throw new IllegalStateException(
                        "This Builder should not be reused. Use a new Builder instance instead");
            }
        }
    }

    @DataClass.Generated(
            time = 1688111819473L,
            codegenVersion = "1.0.23",
            sourceFile = "packages/modules/OnDevicePersonalization/framework/java/android/app/ondevicepersonalization/Location.java",
            inputSignatures = "static final  android.app.ondevicepersonalization.Location EMPTY\n  long mTimestampSeconds\n  double mLatitude\n  double mLongitude\npublic static final  int LOCATION_PROVIDER_TYPE_UNKNOWN\npublic static final  int LOCATION_PROVIDER_TYPE_GPS\npublic static final  int LOCATION_PROVIDER_TYPE_NETWORK\n @android.app.ondevicepersonalization.Location.LocationProviderType int mLocationProvider\n  boolean mPreciseLocation\nclass Location extends java.lang.Object implements [android.os.Parcelable]\n@com.android.ondevicepersonalization.internal.util.DataClass(genBuilder=true, genEqualsHashCode=true)")
    @Deprecated
    private void __metadata() {}


    //@formatter:on
    // End of generated code

}
