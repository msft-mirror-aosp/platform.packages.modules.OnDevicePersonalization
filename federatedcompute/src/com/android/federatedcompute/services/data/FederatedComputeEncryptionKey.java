/*
 * Copyright (C) 2023 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.android.federatedcompute.services.data;

import android.annotation.NonNull;

import com.android.ondevicepersonalization.internal.util.AnnotationValidations;
import com.android.ondevicepersonalization.internal.util.DataClass;

import java.io.Serializable;

/** The details of a federated compute encryption key. */
@DataClass(genHiddenBuilder = true, genEqualsHashCode = true)
public class FederatedComputeEncryptionKey implements Serializable {


    /** Define the key type as enum.
     * Currently keys are used to encrypt results only. Keys might be used to
     * sign (and verify on server) in the future.
     */
    public static final int KEY_TYPE_UNDEFINED = 0;

    public static final int KEY_TYPE_ENCRYPTION = 1;

    /**
     * @return the key identifier.
     */
    @NonNull private final String mKeyIdentifier;

    /**
     * @return the public key.
     */
    @NonNull private final String mPublicKey;

    /**
     * @return the key type.
     */
    @KeyType private final int mKeyType;

    /**
     * @return the creation time in milliseconds.
     */
    private final long mCreationTime;

    /**
     * @return the expiry time in milliseconds.
     */
    private final long mExpiryTime;



    // Code below generated by codegen v1.0.23.
    //
    // DO NOT MODIFY!
    // CHECKSTYLE:OFF Generated code
    //
    // To regenerate run:
    // $ codegen $ANDROID_BUILD_TOP/packages/modules/OnDevicePersonalization/federatedcompute/src/com/android/federatedcompute/services/data/FederatedComputeEncryptionKey.java
    //
    // To exclude the generated code from IntelliJ auto-formatting enable (one-time):
    //   Settings > Editor > Code Style > Formatter Control
    //@formatter:off


    @android.annotation.IntDef(prefix = "KEY_TYPE_", value = {
        KEY_TYPE_UNDEFINED,
        KEY_TYPE_ENCRYPTION
    })
    @java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.SOURCE)
    @DataClass.Generated.Member
    public @interface KeyType {}

    @DataClass.Generated.Member
    public static String keyTypeToString(@KeyType int value) {
        switch (value) {
            case KEY_TYPE_UNDEFINED:
                    return "KEY_TYPE_UNDEFINED";
            case KEY_TYPE_ENCRYPTION:
                    return "KEY_TYPE_ENCRYPTION";
            default: return Integer.toHexString(value);
        }
    }

    @DataClass.Generated.Member
    /* package-private */ FederatedComputeEncryptionKey(
            @NonNull String keyIdentifier,
            @NonNull String publicKey,
            @KeyType int keyType,
            long creationTime,
            long expiryTime) {
        this.mKeyIdentifier = keyIdentifier;
        AnnotationValidations.validate(
                NonNull.class, null, mKeyIdentifier);
        this.mPublicKey = publicKey;
        AnnotationValidations.validate(
                NonNull.class, null, mPublicKey);
        this.mKeyType = keyType;

        if (!(mKeyType == KEY_TYPE_UNDEFINED)
                && !(mKeyType == KEY_TYPE_ENCRYPTION)) {
            throw new java.lang.IllegalArgumentException(
                    "keyType was " + mKeyType + " but must be one of: "
                            + "KEY_TYPE_UNDEFINED(" + KEY_TYPE_UNDEFINED + "), "
                            + "KEY_TYPE_ENCRYPTION(" + KEY_TYPE_ENCRYPTION + ")");
        }

        this.mCreationTime = creationTime;
        this.mExpiryTime = expiryTime;

        // onConstructed(); // You can define this method to get a callback
    }

    /**
     * @return the key identifier.
     */
    @DataClass.Generated.Member
    public @NonNull String getKeyIdentifier() {
        return mKeyIdentifier;
    }

    /**
     * @return the public key.
     */
    @DataClass.Generated.Member
    public @NonNull String getPublicKey() {
        return mPublicKey;
    }

    /**
     * @return the key type.
     */
    @DataClass.Generated.Member
    public @KeyType int getKeyType() {
        return mKeyType;
    }

    /**
     * @return the creation time in milliseconds.
     */
    @DataClass.Generated.Member
    public long getCreationTime() {
        return mCreationTime;
    }

    /**
     * @return the expiry time in milliseconds.
     */
    @DataClass.Generated.Member
    public long getExpiryTime() {
        return mExpiryTime;
    }

    @Override
    @DataClass.Generated.Member
    public boolean equals(@android.annotation.Nullable Object o) {
        // You can override field equality logic by defining either of the methods like:
        // boolean fieldNameEquals(FederatedComputeEncryptionKey other) { ... }
        // boolean fieldNameEquals(FieldType otherValue) { ... }

        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        @SuppressWarnings("unchecked")
        FederatedComputeEncryptionKey that = (FederatedComputeEncryptionKey) o;
        //noinspection PointlessBooleanExpression
        return true
                && java.util.Objects.equals(mKeyIdentifier, that.mKeyIdentifier)
                && java.util.Objects.equals(mPublicKey, that.mPublicKey)
                && mKeyType == that.mKeyType
                && mCreationTime == that.mCreationTime
                && mExpiryTime == that.mExpiryTime;
    }

    @Override
    @DataClass.Generated.Member
    public int hashCode() {
        // You can override field hashCode logic by defining methods like:
        // int fieldNameHashCode() { ... }

        int _hash = 1;
        _hash = 31 * _hash + java.util.Objects.hashCode(mKeyIdentifier);
        _hash = 31 * _hash + java.util.Objects.hashCode(mPublicKey);
        _hash = 31 * _hash + mKeyType;
        _hash = 31 * _hash + Long.hashCode(mCreationTime);
        _hash = 31 * _hash + Long.hashCode(mExpiryTime);
        return _hash;
    }

    /**
     * A builder for {@link FederatedComputeEncryptionKey}
     * @hide
     */
    @SuppressWarnings("WeakerAccess")
    @DataClass.Generated.Member
    public static class Builder {

        private @NonNull String mKeyIdentifier;
        private @NonNull String mPublicKey;
        private @KeyType int mKeyType;
        private long mCreationTime;
        private long mExpiryTime;

        private long mBuilderFieldsSet = 0L;

        public Builder() {}

        /**
         * Creates a new Builder.
         *
         */
        public Builder(
                @NonNull String keyIdentifier,
                @NonNull String publicKey,
                @KeyType int keyType,
                long creationTime,
                long expiryTime) {
            mKeyIdentifier = keyIdentifier;
            AnnotationValidations.validate(
                    NonNull.class, null, mKeyIdentifier);
            mPublicKey = publicKey;
            AnnotationValidations.validate(
                    NonNull.class, null, mPublicKey);
            mKeyType = keyType;

            if (!(mKeyType == KEY_TYPE_UNDEFINED)
                    && !(mKeyType == KEY_TYPE_ENCRYPTION)) {
                throw new java.lang.IllegalArgumentException(
                        "keyType was " + mKeyType + " but must be one of: "
                                + "KEY_TYPE_UNDEFINED(" + KEY_TYPE_UNDEFINED + "), "
                                + "KEY_TYPE_ENCRYPTION(" + KEY_TYPE_ENCRYPTION + ")");
            }

            mCreationTime = creationTime;
            mExpiryTime = expiryTime;
        }

        /**
         * @return the key identifier.
         */
        @DataClass.Generated.Member
        public @NonNull Builder setKeyIdentifier(@NonNull String value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x1;
            mKeyIdentifier = value;
            return this;
        }

        /**
         * @return the public key.
         */
        @DataClass.Generated.Member
        public @NonNull Builder setPublicKey(@NonNull String value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x2;
            mPublicKey = value;
            return this;
        }

        /**
         * @return the key type.
         */
        @DataClass.Generated.Member
        public @NonNull Builder setKeyType(@KeyType int value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x4;
            mKeyType = value;
            return this;
        }

        /**
         * @return the creation time in milliseconds.
         */
        @DataClass.Generated.Member
        public @NonNull Builder setCreationTime(long value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x8;
            mCreationTime = value;
            return this;
        }

        /**
         * @return the expiry time in milliseconds.
         */
        @DataClass.Generated.Member
        public @NonNull Builder setExpiryTime(long value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x10;
            mExpiryTime = value;
            return this;
        }

        /** Builds the instance. This builder should not be touched after calling this! */
        public @NonNull FederatedComputeEncryptionKey build() {
            checkNotUsed();
            mBuilderFieldsSet |= 0x20; // Mark builder used

            FederatedComputeEncryptionKey o = new FederatedComputeEncryptionKey(
                    mKeyIdentifier,
                    mPublicKey,
                    mKeyType,
                    mCreationTime,
                    mExpiryTime);
            return o;
        }

        private void checkNotUsed() {
            if ((mBuilderFieldsSet & 0x20) != 0) {
                throw new IllegalStateException(
                        "This Builder should not be reused. Use a new Builder instance instead");
            }
        }
    }

    @DataClass.Generated(
            time = 1698371312320L,
            codegenVersion = "1.0.23",
            sourceFile = "packages/modules/OnDevicePersonalization/federatedcompute/src/com/android/federatedcompute/services/data/FederatedComputeEncryptionKey.java",
            inputSignatures = "public static final  int KEY_TYPE_UNDEFINED\npublic static final  int KEY_TYPE_ENCRYPTION\nprivate final @android.annotation.NonNull java.lang.String mKeyIdentifier\nprivate final @android.annotation.NonNull java.lang.String mPublicKey\nprivate final @com.android.federatedcompute.services.data.FederatedComputeEncryptionKey.KeyType int mKeyType\nprivate final  long mCreationTime\nprivate final  long mExpiryTime\nclass FederatedComputeEncryptionKey extends java.lang.Object implements [java.io.Serializable]\n@com.android.ondevicepersonalization.internal.util.DataClass(genHiddenBuilder=true, genEqualsHashCode=true)")
    @Deprecated
    private void __metadata() {}


    //@formatter:on
    // End of generated code

}
