/*
 * Copyright (C) 2024 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.android.federatedcompute.services.data;

import android.annotation.NonNull;

import com.android.ondevicepersonalization.internal.util.AnnotationValidations;
import com.android.ondevicepersonalization.internal.util.DataClass;

/** Contains the details of a training task history. */
@DataClass(genBuilder = true, genEqualsHashCode = true)
public class TaskHistory {
    /** The job id of this federated compute job. */
    @NonNull private int mJobId;

    /** The name of the federated compute population. */
    @NonNull private String mPopulationName;

    /**
     * The name of the task within the population. One population may have multiple tasks. The task
     * name can be used to uniquely identify the job.
     */
    @NonNull private String mTaskName;

    // The timestamp when device uploads training result to servers done.
    @NonNull private long mContributionTime;

    // The latest round number that device contribute training result successfully. The round number
    // is
    // returned by federated compute server when assigning task to device.
    @NonNull private long mContributionRound;

    // The total number that device has participate in the training per task per population.
    @NonNull private long mTotalParticipation;

    // Code below generated by codegen v1.0.23.
    //
    // DO NOT MODIFY!
    // CHECKSTYLE:OFF Generated code
    //
    // To regenerate run:
    // $ codegen
    // $ANDROID_BUILD_TOP/packages/modules/OnDevicePersonalization/federatedcompute/src/com/android/federatedcompute/services/data/TaskHistory.java
    //
    // To exclude the generated code from IntelliJ auto-formatting enable (one-time):
    //   Settings > Editor > Code Style > Formatter Control
    // @formatter:off

    @DataClass.Generated.Member
    /* package-private */ TaskHistory(
            @NonNull int jobId,
            @NonNull String populationName,
            @NonNull String taskName,
            @NonNull long contributionTime,
            @NonNull long contributionRound,
            @NonNull long totalParticipation) {
        this.mJobId = jobId;
        AnnotationValidations.validate(NonNull.class, null, mJobId);
        this.mPopulationName = populationName;
        AnnotationValidations.validate(NonNull.class, null, mPopulationName);
        this.mTaskName = taskName;
        AnnotationValidations.validate(NonNull.class, null, mTaskName);
        this.mContributionTime = contributionTime;
        AnnotationValidations.validate(NonNull.class, null, mContributionTime);
        this.mContributionRound = contributionRound;
        AnnotationValidations.validate(NonNull.class, null, mContributionRound);
        this.mTotalParticipation = totalParticipation;
        AnnotationValidations.validate(NonNull.class, null, mTotalParticipation);

        // onConstructed(); // You can define this method to get a callback
    }

    /** The job id of this federated compute job. */
    @DataClass.Generated.Member
    public @NonNull int getJobId() {
        return mJobId;
    }

    /** The name of the federated compute population. */
    @DataClass.Generated.Member
    public @NonNull String getPopulationName() {
        return mPopulationName;
    }

    /**
     * The name of the task within the population. One population may have multiple tasks. The task
     * name can be used to uniquely identify the job.
     */
    @DataClass.Generated.Member
    public @NonNull String getTaskName() {
        return mTaskName;
    }

    @DataClass.Generated.Member
    public @NonNull long getContributionTime() {
        return mContributionTime;
    }

    @DataClass.Generated.Member
    public @NonNull long getContributionRound() {
        return mContributionRound;
    }

    @DataClass.Generated.Member
    public @NonNull long getTotalParticipation() {
        return mTotalParticipation;
    }

    @Override
    @DataClass.Generated.Member
    public boolean equals(@android.annotation.Nullable Object o) {
        // You can override field equality logic by defining either of the methods like:
        // boolean fieldNameEquals(TaskHistory other) { ... }
        // boolean fieldNameEquals(FieldType otherValue) { ... }

        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        @SuppressWarnings("unchecked")
        TaskHistory that = (TaskHistory) o;
        //noinspection PointlessBooleanExpression
        return true
                && mJobId == that.mJobId
                && java.util.Objects.equals(mPopulationName, that.mPopulationName)
                && java.util.Objects.equals(mTaskName, that.mTaskName)
                && mContributionTime == that.mContributionTime
                && mContributionRound == that.mContributionRound
                && mTotalParticipation == that.mTotalParticipation;
    }

    @Override
    @DataClass.Generated.Member
    public int hashCode() {
        // You can override field hashCode logic by defining methods like:
        // int fieldNameHashCode() { ... }

        int _hash = 1;
        _hash = 31 * _hash + mJobId;
        _hash = 31 * _hash + java.util.Objects.hashCode(mPopulationName);
        _hash = 31 * _hash + java.util.Objects.hashCode(mTaskName);
        _hash = 31 * _hash + Long.hashCode(mContributionTime);
        _hash = 31 * _hash + Long.hashCode(mContributionRound);
        _hash = 31 * _hash + Long.hashCode(mTotalParticipation);
        return _hash;
    }

    /** A builder for {@link TaskHistory} */
    @SuppressWarnings("WeakerAccess")
    @DataClass.Generated.Member
    public static class Builder {

        private @NonNull int mJobId;
        private @NonNull String mPopulationName;
        private @NonNull String mTaskName;
        private @NonNull long mContributionTime;
        private @NonNull long mContributionRound;
        private @NonNull long mTotalParticipation;

        private long mBuilderFieldsSet = 0L;

        public Builder() {}

        /** The job id of this federated compute job. */
        @DataClass.Generated.Member
        public @NonNull Builder setJobId(@NonNull int value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x1;
            mJobId = value;
            return this;
        }

        /** The name of the federated compute population. */
        @DataClass.Generated.Member
        public @NonNull Builder setPopulationName(@NonNull String value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x2;
            mPopulationName = value;
            return this;
        }

        /**
         * The name of the task within the population. One population may have multiple tasks. The
         * task name can be used to uniquely identify the job.
         */
        @DataClass.Generated.Member
        public @NonNull Builder setTaskName(@NonNull String value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x4;
            mTaskName = value;
            return this;
        }

        @DataClass.Generated.Member
        public @NonNull Builder setContributionTime(@NonNull long value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x8;
            mContributionTime = value;
            return this;
        }

        @DataClass.Generated.Member
        public @NonNull Builder setContributionRound(@NonNull long value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x10;
            mContributionRound = value;
            return this;
        }

        @DataClass.Generated.Member
        public @NonNull Builder setTotalParticipation(@NonNull long value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x20;
            mTotalParticipation = value;
            return this;
        }

        /** Builds the instance. This builder should not be touched after calling this! */
        public @NonNull TaskHistory build() {
            checkNotUsed();
            mBuilderFieldsSet |= 0x40; // Mark builder used

            TaskHistory o =
                    new TaskHistory(
                            mJobId,
                            mPopulationName,
                            mTaskName,
                            mContributionTime,
                            mContributionRound,
                            mTotalParticipation);
            return o;
        }

        private void checkNotUsed() {
            if ((mBuilderFieldsSet & 0x40) != 0) {
                throw new IllegalStateException(
                        "This Builder should not be reused. Use a new Builder instance instead");
            }
        }
    }

    @DataClass.Generated(
            time = 1705023684841L,
            codegenVersion = "1.0.23",
            sourceFile =
                    "packages/modules/OnDevicePersonalization/federatedcompute/src/com/android/federatedcompute/services/data/TaskHistory.java",
            inputSignatures =
                    "private @android.annotation.NonNull int mJobId\nprivate @android.annotation.NonNull java.lang.String mPopulationName\nprivate @android.annotation.NonNull java.lang.String mTaskName\nprivate @android.annotation.NonNull long mContributionTime\nprivate @android.annotation.NonNull long mContributionRound\nprivate @android.annotation.NonNull long mTotalParticipation\nclass TaskHistory extends java.lang.Object implements []\n@com.android.ondevicepersonalization.internal.util.DataClass(genBuilder=true, genEqualsHashCode=true)")
    @Deprecated
    private void __metadata() {}

    // @formatter:on
    // End of generated code

}
