/*
 * Copyright (C) 2024 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.android.federatedcompute.services.data;

import android.annotation.NonNull;

import com.android.ondevicepersonalization.internal.util.AnnotationValidations;
import com.android.ondevicepersonalization.internal.util.DataClass;

@DataClass(genHiddenBuilder = true, genEqualsHashCode = true)
public class ODPAuthorizationToken {
    @NonNull private final String mOwnerIdentifier;

    @NonNull private final String mAuthorizationToken;

    @NonNull private final long mCreationTime;

    @NonNull private final long mExpiryTime;




    // Code below generated by codegen v1.0.23.
    //
    // DO NOT MODIFY!
    // CHECKSTYLE:OFF Generated code
    //
    // To regenerate run:
    // $ codegen $ANDROID_BUILD_TOP/packages/modules/OnDevicePersonalization/federatedcompute/src/com/android/federatedcompute/services/data/ODPAuthorizationToken.java
    //
    // To exclude the generated code from IntelliJ auto-formatting enable (one-time):
    //   Settings > Editor > Code Style > Formatter Control
    //@formatter:off


    @DataClass.Generated.Member
    /* package-private */ ODPAuthorizationToken(
            @NonNull String ownerIdentifier,
            @NonNull String authorizationToken,
            @NonNull long creationTime,
            @NonNull long expiryTime) {
        this.mOwnerIdentifier = ownerIdentifier;
        AnnotationValidations.validate(
                NonNull.class, null, mOwnerIdentifier);
        this.mAuthorizationToken = authorizationToken;
        AnnotationValidations.validate(
                NonNull.class, null, mAuthorizationToken);
        this.mCreationTime = creationTime;
        AnnotationValidations.validate(
                NonNull.class, null, mCreationTime);
        this.mExpiryTime = expiryTime;
        AnnotationValidations.validate(
                NonNull.class, null, mExpiryTime);

        // onConstructed(); // You can define this method to get a callback
    }

    @DataClass.Generated.Member
    public @NonNull String getOwnerIdentifier() {
        return mOwnerIdentifier;
    }

    @DataClass.Generated.Member
    public @NonNull String getAuthorizationToken() {
        return mAuthorizationToken;
    }

    @DataClass.Generated.Member
    public @NonNull long getCreationTime() {
        return mCreationTime;
    }

    @DataClass.Generated.Member
    public @NonNull long getExpiryTime() {
        return mExpiryTime;
    }

    @Override
    @DataClass.Generated.Member
    public boolean equals(@android.annotation.Nullable Object o) {
        // You can override field equality logic by defining either of the methods like:
        // boolean fieldNameEquals(ODPAuthorizationToken other) { ... }
        // boolean fieldNameEquals(FieldType otherValue) { ... }

        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        @SuppressWarnings("unchecked")
        ODPAuthorizationToken that = (ODPAuthorizationToken) o;
        //noinspection PointlessBooleanExpression
        return true
                && java.util.Objects.equals(mOwnerIdentifier, that.mOwnerIdentifier)
                && java.util.Objects.equals(mAuthorizationToken, that.mAuthorizationToken)
                && mCreationTime == that.mCreationTime
                && mExpiryTime == that.mExpiryTime;
    }

    @Override
    @DataClass.Generated.Member
    public int hashCode() {
        // You can override field hashCode logic by defining methods like:
        // int fieldNameHashCode() { ... }

        int _hash = 1;
        _hash = 31 * _hash + java.util.Objects.hashCode(mOwnerIdentifier);
        _hash = 31 * _hash + java.util.Objects.hashCode(mAuthorizationToken);
        _hash = 31 * _hash + Long.hashCode(mCreationTime);
        _hash = 31 * _hash + Long.hashCode(mExpiryTime);
        return _hash;
    }

    /**
     * A builder for {@link ODPAuthorizationToken}
     * @hide
     */
    @SuppressWarnings("WeakerAccess")
    @DataClass.Generated.Member
    public static class Builder {

        private @NonNull String mOwnerIdentifier;
        private @NonNull String mAuthorizationToken;
        private @NonNull long mCreationTime;
        private @NonNull long mExpiryTime;

        private long mBuilderFieldsSet = 0L;

        public Builder() {}

        public Builder(
                @NonNull String ownerIdentifier,
                @NonNull String authorizationToken,
                @NonNull long creationTime,
                @NonNull long expiryTime) {
            mOwnerIdentifier = ownerIdentifier;
            AnnotationValidations.validate(
                    NonNull.class, null, mOwnerIdentifier);
            mAuthorizationToken = authorizationToken;
            AnnotationValidations.validate(
                    NonNull.class, null, mAuthorizationToken);
            mCreationTime = creationTime;
            AnnotationValidations.validate(
                    NonNull.class, null, mCreationTime);
            mExpiryTime = expiryTime;
            AnnotationValidations.validate(
                    NonNull.class, null, mExpiryTime);
        }

        @DataClass.Generated.Member
        public @NonNull Builder setOwnerIdentifier(@NonNull String value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x1;
            mOwnerIdentifier = value;
            return this;
        }

        @DataClass.Generated.Member
        public @NonNull Builder setAuthorizationToken(@NonNull String value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x2;
            mAuthorizationToken = value;
            return this;
        }

        @DataClass.Generated.Member
        public @NonNull Builder setCreationTime(@NonNull long value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x4;
            mCreationTime = value;
            return this;
        }

        @DataClass.Generated.Member
        public @NonNull Builder setExpiryTime(@NonNull long value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x8;
            mExpiryTime = value;
            return this;
        }

        /** Builds the instance. This builder should not be touched after calling this! */
        public @NonNull ODPAuthorizationToken build() {
            checkNotUsed();
            mBuilderFieldsSet |= 0x10; // Mark builder used

            ODPAuthorizationToken o = new ODPAuthorizationToken(
                    mOwnerIdentifier,
                    mAuthorizationToken,
                    mCreationTime,
                    mExpiryTime);
            return o;
        }

        private void checkNotUsed() {
            if ((mBuilderFieldsSet & 0x10) != 0) {
                throw new IllegalStateException(
                        "This Builder should not be reused. Use a new Builder instance instead");
            }
        }
    }

    @DataClass.Generated(
            time = 1705438009708L,
            codegenVersion = "1.0.23",
            sourceFile = "packages/modules/OnDevicePersonalization/federatedcompute/src/com/android/federatedcompute/services/data/ODPAuthorizationToken.java",
            inputSignatures = "private final @android.annotation.NonNull java.lang.String mOwnerIdentifier\nprivate final @android.annotation.NonNull java.lang.String mAuthorizationToken\nprivate final @android.annotation.NonNull long mCreationTime\nprivate final @android.annotation.NonNull long mExpiryTime\nclass ODPAuthorizationToken extends java.lang.Object implements []\n@com.android.ondevicepersonalization.internal.util.DataClass(genHiddenBuilder=true, genEqualsHashCode=true)")
    @Deprecated
    private void __metadata() {}


    //@formatter:on
    // End of generated code

}
