/*
 * Copyright (C) 2022 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.android.ondevicepersonalization.services.data;

import android.annotation.NonNull;

import com.android.ondevicepersonalization.internal.util.AnnotationValidations;
import com.android.ondevicepersonalization.internal.util.DataClass;

/**
 * VendorData object for the VendorData table
 */
@DataClass(
        genBuilder = true,
        genEqualsHashCode = true
)
public class VendorData {
    /** Lookup key for the row - unique for each vendor */
    @NonNull
    private final String mKey;

    /** Row data - ads or other vendor settings */
    @NonNull
    private final byte[] mData;

    /** A vendor-assigned fingerprint for the row contents */
    @NonNull
    private final String mFp;


    // Code below generated by codegen v1.0.23.
    //
    // DO NOT MODIFY!
    // CHECKSTYLE:OFF Generated code
    //
    // To regenerate run:
    // $ codegen $ANDROID_BUILD_TOP/packages/modules/OnDevicePersonalization/src/com/android
    // /ondevicepersonalization/services/data/VendorData.java
    //
    // To exclude the generated code from IntelliJ auto-formatting enable (one-time):
    //   Settings > Editor > Code Style > Formatter Control
    //@formatter:off


    @DataClass.Generated.Member
        /* package-private */ VendorData(
            @NonNull String key,
            @NonNull byte[] data,
            @NonNull String fp) {
        this.mKey = key;
        AnnotationValidations.validate(
                NonNull.class, null, mKey);
        this.mData = data;
        AnnotationValidations.validate(
                NonNull.class, null, mData);
        this.mFp = fp;
        AnnotationValidations.validate(
                NonNull.class, null, mFp);

        // onConstructed(); // You can define this method to get a callback
    }

    /**
     * Lookup key for the row - unique for each vendor
     */
    @DataClass.Generated.Member
    @NonNull
    public
    String getKey() {
        return mKey;
    }

    /**
     * Row data - ads or other vendor settings
     */
    @DataClass.Generated.Member
    @NonNull
    public
    byte[] getData() {
        return mData;
    }

    /**
     * A vendor-assigned fingerprint for the row contents
     */
    @DataClass.Generated.Member
    @NonNull
    public
    String getFp() {
        return mFp;
    }

    @Override
    @DataClass.Generated.Member
    public boolean equals(@android.annotation.Nullable Object o) {
        // You can override field equality logic by defining either of the methods like:
        // boolean fieldNameEquals(VendorData other) { ... }
        // boolean fieldNameEquals(FieldType otherValue) { ... }

        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        @SuppressWarnings("unchecked")
        VendorData that = (VendorData) o;
        //noinspection PointlessBooleanExpression
        return true
                && java.util.Objects.equals(mKey, that.mKey)
                && java.util.Arrays.equals(mData, that.mData)
                && java.util.Objects.equals(mFp, that.mFp);
    }

    @Override
    @DataClass.Generated.Member
    public int hashCode() {
        // You can override field hashCode logic by defining methods like:
        // int fieldNameHashCode() { ... }

        int _hash = 1;
        _hash = 31 * _hash + java.util.Objects.hashCode(mKey);
        _hash = 31 * _hash + java.util.Arrays.hashCode(mData);
        _hash = 31 * _hash + java.util.Objects.hashCode(mFp);
        return _hash;
    }

    @DataClass.Generated(
            time = 1662575248972L,
            codegenVersion = "1.0.23",
            sourceFile = "packages/modules/OnDevicePersonalization/src/com/android"
                    + "/ondevicepersonalization/services/data/VendorData.java",
            inputSignatures = "private @android.annotation.NonNull java.lang.String mKey\nprivate"
                    + " @android.annotation.NonNull byte[] mData\nprivate @android.annotation"
                    + ".NonNull java.lang.String mFp\nclass VendorData extends java.lang.Object "
                    + "implements []\n@com.android.ondevicepersonalization.internal.util"
                    + ".DataClass(genBuilder=true, genEqualsHashCode=true)")
    @Deprecated
    private void __metadata() {
    }

    /**
     * A builder for {@link VendorData}
     */
    @SuppressWarnings("WeakerAccess")
    @DataClass.Generated.Member
    public static class Builder {

        @NonNull
        private
        String mKey;
        @NonNull
        private
        byte[] mData;
        @NonNull
        private
        String mFp;

        private long mBuilderFieldsSet = 0L;

        public Builder() {
        }

        /**
         * Lookup key for the row - unique for each vendor
         */
        @DataClass.Generated.Member
        @NonNull
        public
        Builder setKey(@NonNull String value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x1;
            mKey = value;
            return this;
        }

        /**
         * Row data - ads or other vendor settings
         */
        @DataClass.Generated.Member
        @NonNull
        public
        Builder setData(@NonNull byte... value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x2;
            mData = value;
            return this;
        }

        /**
         * A vendor-assigned fingerprint for the row contents
         */
        @DataClass.Generated.Member
        @NonNull
        public
        Builder setFp(@NonNull String value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x4;
            mFp = value;
            return this;
        }

        /** Builds the instance. This builder should not be touched after calling this! */
        @NonNull
        public
        VendorData build() {
            checkNotUsed();
            mBuilderFieldsSet |= 0x8; // Mark builder used

            VendorData o = new VendorData(
                    mKey,
                    mData,
                    mFp);
            return o;
        }

        private void checkNotUsed() {
            if ((mBuilderFieldsSet & 0x8) != 0) {
                throw new IllegalStateException(
                        "This Builder should not be reused. Use a new Builder instance instead");
            }
        }
    }


    //@formatter:on
    // End of generated code

}
