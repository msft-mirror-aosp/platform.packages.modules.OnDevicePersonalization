/*
 * Copyright (C) 2022 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.android.ondevicepersonalization.services.data.events;

import android.annotation.NonNull;

import com.android.ondevicepersonalization.internal.util.AnnotationValidations;
import com.android.ondevicepersonalization.internal.util.DataClass;

/**
 * Query object for the Query table
 */
@DataClass(
        genBuilder = true,
        genEqualsHashCode = true
)
public class Query {
    /** Time of the query in microseconds. */
    @NonNull
    private final long mTimeUsec;

    /** The id of the thread serving the query. */
    @NonNull
    private final long mThreadId;

    /** Blob representing the query. */
    @NonNull
    private final byte[] mQuery;



    // Code below generated by codegen v1.0.23.
    //
    // DO NOT MODIFY!
    // CHECKSTYLE:OFF Generated code
    //
    // To regenerate run:
    // $ codegen $ANDROID_BUILD_TOP/packages/modules/OnDevicePersonalization/src/com/android/ondevicepersonalization/services/data/events/Query.java
    //
    // To exclude the generated code from IntelliJ auto-formatting enable (one-time):
    //   Settings > Editor > Code Style > Formatter Control
    //@formatter:off


    @DataClass.Generated.Member
    /* package-private */ Query(
            @NonNull long timeUsec,
            @NonNull long threadId,
            @NonNull byte[] query) {
        this.mTimeUsec = timeUsec;
        AnnotationValidations.validate(
                NonNull.class, null, mTimeUsec);
        this.mThreadId = threadId;
        AnnotationValidations.validate(
                NonNull.class, null, mThreadId);
        this.mQuery = query;
        AnnotationValidations.validate(
                NonNull.class, null, mQuery);

        // onConstructed(); // You can define this method to get a callback
    }

    /**
     * Time of the query in microseconds.
     */
    @DataClass.Generated.Member
    public @NonNull long getTimeUsec() {
        return mTimeUsec;
    }

    /**
     * The id of the thread serving the query.
     */
    @DataClass.Generated.Member
    public @NonNull long getThreadId() {
        return mThreadId;
    }

    /**
     * Blob representing the query.
     */
    @DataClass.Generated.Member
    public @NonNull byte[] getQuery() {
        return mQuery;
    }

    @Override
    @DataClass.Generated.Member
    public boolean equals(@android.annotation.Nullable Object o) {
        // You can override field equality logic by defining either of the methods like:
        // boolean fieldNameEquals(Query other) { ... }
        // boolean fieldNameEquals(FieldType otherValue) { ... }

        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        @SuppressWarnings("unchecked")
        Query that = (Query) o;
        //noinspection PointlessBooleanExpression
        return true
                && mTimeUsec == that.mTimeUsec
                && mThreadId == that.mThreadId
                && java.util.Arrays.equals(mQuery, that.mQuery);
    }

    @Override
    @DataClass.Generated.Member
    public int hashCode() {
        // You can override field hashCode logic by defining methods like:
        // int fieldNameHashCode() { ... }

        int _hash = 1;
        _hash = 31 * _hash + Long.hashCode(mTimeUsec);
        _hash = 31 * _hash + Long.hashCode(mThreadId);
        _hash = 31 * _hash + java.util.Arrays.hashCode(mQuery);
        return _hash;
    }

    /**
     * A builder for {@link Query}
     */
    @SuppressWarnings("WeakerAccess")
    @DataClass.Generated.Member
    public static class Builder {

        private @NonNull long mTimeUsec;
        private @NonNull long mThreadId;
        private @NonNull byte[] mQuery;

        private long mBuilderFieldsSet = 0L;

        public Builder() {
        }

        /**
         * Creates a new Builder.
         *
         * @param timeUsec
         *   Time of the query in microseconds.
         * @param threadId
         *   The id of the thread serving the query.
         * @param query
         *   Blob representing the query.
         */
        public Builder(
                @NonNull long timeUsec,
                @NonNull long threadId,
                @NonNull byte[] query) {
            mTimeUsec = timeUsec;
            AnnotationValidations.validate(
                    NonNull.class, null, mTimeUsec);
            mThreadId = threadId;
            AnnotationValidations.validate(
                    NonNull.class, null, mThreadId);
            mQuery = query;
            AnnotationValidations.validate(
                    NonNull.class, null, mQuery);
        }

        /**
         * Time of the query in microseconds.
         */
        @DataClass.Generated.Member
        public @NonNull Builder setTimeUsec(@NonNull long value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x1;
            mTimeUsec = value;
            return this;
        }

        /**
         * The id of the thread serving the query.
         */
        @DataClass.Generated.Member
        public @NonNull Builder setThreadId(@NonNull long value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x2;
            mThreadId = value;
            return this;
        }

        /**
         * Blob representing the query.
         */
        @DataClass.Generated.Member
        public @NonNull Builder setQuery(@NonNull byte... value) {
            checkNotUsed();
            mBuilderFieldsSet |= 0x4;
            mQuery = value;
            return this;
        }

        /** Builds the instance. This builder should not be touched after calling this! */
        public @NonNull Query build() {
            checkNotUsed();
            mBuilderFieldsSet |= 0x8; // Mark builder used

            Query o = new Query(
                    mTimeUsec,
                    mThreadId,
                    mQuery);
            return o;
        }

        private void checkNotUsed() {
            if ((mBuilderFieldsSet & 0x8) != 0) {
                throw new IllegalStateException(
                        "This Builder should not be reused. Use a new Builder instance instead");
            }
        }
    }

    @DataClass.Generated(
            time = 1671641270655L,
            codegenVersion = "1.0.23",
            sourceFile = "packages/modules/OnDevicePersonalization/src/com/android/ondevicepersonalization/services/data/events/Query.java",
            inputSignatures = "private final @android.annotation.NonNull long mTimeUsec\nprivate final @android.annotation.NonNull long mThreadId\nprivate final @android.annotation.NonNull byte[] mQuery\nclass Query extends java.lang.Object implements []\n@com.android.ondevicepersonalization.internal.util.DataClass(genBuilder=true, genEqualsHashCode=true)")
    @Deprecated
    private void __metadata() {}


    //@formatter:on
    // End of generated code

}
